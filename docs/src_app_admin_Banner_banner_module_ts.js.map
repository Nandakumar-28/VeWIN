{"version":3,"file":"src_app_admin_Banner_banner_module_ts.js","mappings":"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","sources":["./src/app/admin/Banner/banner-add-edit/banner-add-edit.component.ts","./src/app/admin/Banner/banner-add-edit/banner-add-edit.component.html","./src/app/admin/Banner/banner-get/banner-delete.component.ts","./src/app/admin/Banner/banner-get/banner-get.component.ts","./src/app/admin/Banner/banner-get/banner-get.component.html","./src/app/admin/Banner/banner-routing.module.ts","./src/app/admin/Banner/banner.module.ts","./src/app/admin/Banner/services/banner.service.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NbToastrService } from '@nebular/theme';\nimport { ROUTE_PATH } from '../../../shared/constants/route-path.constant';\nimport { DatePipe } from '@angular/common';\nimport { HttpStatusCode } from '@angular/common/http';\nimport { Subscription } from 'rxjs';\nimport { BannerService } from '../services/banner.service';\n\n@Component({\n  selector: 'ngx-banner-add-edit',\n  templateUrl: './banner-add-edit.component.html',\n  styleUrls: ['./banner-add-edit.component.scss']\n})\nexport class BannerAddEditComponent implements OnInit {\n\n  AddBannerForm: FormGroup;\n  submitted = false;\n  //page_title: string;\n  data_loading = false;\n\n  //show password\n  showPassword = true;\n\n  //userlist pass user data\n  bannerDetails: any;\n  page_title: string;\n\n  //selsct photo\n  selectedPhoto: File;\n\n\n  private subscription: Subscription;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private aRoute: ActivatedRoute,\n    private bannerService: BannerService,\n    private toastrService: NbToastrService,\n    private datePipe: DatePipe,\n\n  ) { }\n\n  ngOnInit(): void {\n    this.AddBannerFormInitialize();\n\n    if (this.router.url.indexOf(\"edit\") !== -1) {\n      // this.data_loading = true;\n      const id = this.aRoute.snapshot.paramMap.get(\"title\");\n      this.page_title = \"Edit Banner\";\n    } else {\n      this.page_title = \"Create Banner\";\n      this.AddBannerForm.reset();\n    }\n\n\n    // Check if user details are passed user list, service to user-edit\n\n    this.subscription = this.bannerService.getBannerDetails().subscribe(user => {\n      if (user) {\n        this.bannerDetails = user;\n        console.log(this.bannerDetails)\n        // Pre-fill the form with user details\n        this.AddBannerForm.patchValue({\n          photo: this.bannerDetails.photo,\n          fdate: new Date(this.bannerDetails.fdate), // Assuming 'fdate' is a date field\n          tdate: new Date(this.bannerDetails.tdate),\n        });\n      } else {\n        this.AddBannerForm.reset(); // Ensure the form is reset when no user details are present\n      }\n    });\n  }\n  ngOnDestroy(): void {\n    // Unsubscribe to prevent multiple subscriptions when leaving the component\n    this.subscription.unsubscribe();\n  }\n\n  /**\n   * User Form Initialize\n   */\n\n\n  // onSubmit() {\n  //   //  debugger\n  //   //  this.submitted = true;\n  // console.log(\"hi\")\n  //   if (this.AddBannerForm.invalid) {\n  //     return;\n  //   }\n\n  //   // const formData = this.AddBannerForm.value;\n  //   // console.log(formData.fdate)\n  //   const bannerformData = new FormData()\n  //   bannerformData.append('photo', this.selectedPhoto);\n  // console.log(this.bannerformData)\n\n  //   // Get the current date and time in the desired format\n  //   const modifiedDate = this.datePipe.transform(new Date(), \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\n\n  //   // Format the date strings before sending them to the server\n  //   const formattedFromDate = this.datePipe.transform(this.AddBannerForm.controls.fdate.value, \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\n  //   const formattedToDate = this.datePipe.transform(this.AddBannerForm.controls.tdate.value, \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\n  //   // this.bannerformData.append(\"fdate\",formattedFromDate)\n  //   // this.bannerformData.append(\"tdate\",formattedToDate)\n  //   this.bannerformData.append(\"photo\",this.selectedPhoto)\n  //   // this.bannerformData.append(\"id\",this.bannerDetails.id)\n  //   // this.bannerformData.append(\"isdelected\",\"string\")\n  //   // this.bannerformData.append(\"createby\",\"Admin\")\n  //   // this.bannerformData.append(\"createon\",modifiedDate)\n  //   // this.bannerformData.append(\"modifiedby\",\"Admin\")\n  //   // this.bannerformData.append(\"modifiedon\",modifiedDate)\n\n\n  //   console.log(this.bannerformData)\n\n  //   // Check if the URL contains 'edit' to differentiate between create and edit actions\n  //   if (this.router.url.indexOf(\"edit\") !== -1) {\n  //     // For editing, form a request body with put method fields\n  //     // const requestBody = {\n  //     //   id: this.bannerDetails.id,\n  //     //   photo: formData.photo,\n  //     //   // title: formData.title,\n  //     //   // description: formData.description,\n  //     //   fdate: formattedFromDate,\n  //     //   tdate: formattedToDate,\n  //     //   isdeleted: \"string\",\n  //     //   createdby: \"Admin\",\n  //     //   createdon: this.bannerDetails.createdon, // You might want to update these fields\n  //     //   modifiedby: \"Admin\",\n  //     //   modifiedon: modifiedDate, // Similarly update these fields with appropriate values\n  //     // };\n\n  //     this.bannerService.updateBanner(this.bannerformData)\n  //       .subscribe((response) => {\n  //         // this.backToUserList();\n  //         if (HttpStatusCode.Ok) {\n  //           this.toastrService.show(response[\"message\"], \"Success\", {\n  //             status: \"success\",\n  //             duration: 8000,\n  //           });\n  //         } else {\n  //           this.toastrService.show(response[\"message\"], \"Warning\", {\n  //             status: \"warning\",\n  //             duration: 8000,\n  //           });\n  //         }\n  //         this.backToBannerList();\n  //       });\n\n\n  //   } else {\n  //     // For creating a new announcement\n  //     // const requestBody = {\n  //     //   photo: formData.photo,\n  //     //   fdate: formData.fdate,\n  //     //   tdate: formData.tdate,\n  //     //   isdeleted: \"string\",\n  //     //   createdby: \"Admin\",\n  //     //   createdon: modifiedDate, \n  //     //   modifiedby: \"string\",\n  //     //   modifiedon: \"string\", \n  //     // };\n\n  //     this.bannerService.CreateBanner(bannerformData)\n  //       .subscribe((response) => {\n  //         if (HttpStatusCode.Ok) {\n  //           this.toastrService.show(response[\"message\"], \"Success\", {\n  //             status: \"success\",\n  //             duration: 8000,\n  //           });\n  //         } else {\n  //           this.toastrService.show(response[\"message\"], \"Warning\", {\n  //             status: \"warning\",\n  //             duration: 8000,\n  //           });\n  //         }\n  //          this.backToBannerList();\n  //       });\n  //   }\n  // }\n\n\n  AddBannerFormInitialize() {\n    this.AddBannerForm = this.formBuilder.group({\n      photo: [null, [Validators.required]],\n      fdate: [new Date(), [Validators.required]],\n      tdate: [new Date(), [Validators.required]],\n    });\n  }\n\n  onPhotoChange(event: any) {\n    const file = event.target.files[0];\n    if (file) {\n      // Check file size\n      if (file.size > 1048576) { // 1MB in bytes\n        // Handle error, e.g., show a toastr message\n        console.error('File size exceeds the limit of 1MB.');\n        this.AddBannerForm.patchValue({ photo: null });\n        return;\n      }\n      this.selectedPhoto = file;\n      // Read the file and convert it to base64\n      //   const reader = new FileReader();\n      //   reader.onload = () => {\n      //     this.AddBannerForm.patchValue({ photo: reader.result });\n      //   };\n      //   reader.readAsDataURL(file);\n    }\n  }\n\n  onFileSelected(event: any) {\n    const file: File = event.target.files[0];\n    this.selectedPhoto = file;\n  }\n  bannerformData: any = new FormData()\n\n  onSubmit() {\n    if (this.AddBannerForm.invalid || !this.selectedPhoto) {\n      return;\n    }\n    // Format the date strings before sending them to the server\n    const formattedFromDate = this.datePipe.transform(this.AddBannerForm.controls.fdate.value, \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\n    const formattedToDate = this.datePipe.transform(this.AddBannerForm.controls.tdate.value, \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\n\n    // Update the API call based on the create/update condition\n    if (this.router.url.indexOf('edit') !== -1) {\n\n      const formData = new FormData();\n      formData.append('Id', this.bannerDetails.id);\n      formData.append('ImageFile', this.selectedPhoto);\n      formData.append('Fdate', formattedFromDate);\n      formData.append('Tdate', formattedToDate);\n      formData.append('ModifiedBy', 'Admin');\n      //formData.append('CreatedBy', 'Admin');\n      //formData.append('CreatedOn', this.bannerDetails.createdOn);\n      formData.append('ModifiedOn', new Date().toISOString());\n\n      // Fetch banner ID or necessary details for editing\n\n      // Assuming bannerId is available for editing\n      const bannerId = this.bannerDetails.id; // Fetch the correct banner ID here\n\n      // Make the update request to the backend\n      this.bannerService.updateBanner(formData).subscribe(\n        (response) => {\n          // Handle response as needed\n          this.toastrService.show(response['message'], 'Success', {\n            status: 'success',\n            duration: 8000,\n          });\n          this.backToBannerList();\n        },\n        (error) => {\n          // Handle error responses\n          this.toastrService.show('Error updating banner', 'Error', {\n            status: 'danger',\n            duration: 8000,\n          });\n          console.error(error);\n        }\n      );\n    } else {\n\n      const formData = new FormData();\n      formData.append('ImageFile', this.selectedPhoto);\n      formData.append('Fdate', formattedFromDate);\n      formData.append('Tdate', formattedToDate);\n      formData.append('ModifiedBy', 'Admin');\n      formData.append('CreatedBy', 'Admin');\n      formData.append('CreatedOn', new Date().toISOString());\n      formData.append('ModifiedOn', new Date().toISOString());\n\n\n      // For creating a new banner\n      this.bannerService.CreateBanner(formData).subscribe(\n        (response) => {\n          // Handle response as needed\n          this.toastrService.show(response['message'], 'Success', {\n            status: 'success',\n            duration: 8000,\n          });\n          this.backToBannerList();\n        },\n        (error) => {\n          // Handle error responses\n          this.toastrService.show('Error creating banner', 'Error', {\n            status: 'danger',\n            duration: 8000,\n          });\n          console.error(error);\n        }\n      );\n    }\n  }\n\n\n  /**\n   * Back to User List\n   * @param\n   * @returns\n   */\n  backToBannerList() {\n    this.router.navigate([ROUTE_PATH.ADMIN, ROUTE_PATH.BANNER, ROUTE_PATH.BANNERS.GET,]);\n  }\n\n}","<div class=\"row\">\n    <div class=\"col-md-12\">\n        <nb-card>\n            <nb-card-header class=\"text-center bold-text\">{{page_title}}</nb-card-header>\n            <nb-card-body [nbSpinner]=\"data_loading\" nbSpinnerStatus=\"info\">\n\n                <form [formGroup]=\"AddBannerForm\" (ngSubmit)=\"onSubmit()\">\n\n                    <!-- <div class=\"form-group row\">\n                  <label for=\"photo\" class=\"label col-sm-3 col-form-label\">Photo</label>\n                   <div class=\"col-sm-9\">\n                    <input nbInput fullWidth type=\"file\" (change)=\"onPhotoChange($event)\" formControlName=\"photo\">\n                    <img *ngIf=\"AddBannerForm.value.photo\" [src]=\"getPhotoPreview()\" alt=\"Selected Photo\" style=\"max-width: 100%; max-height: 150px;\">\n                      Add error handling for photo size if needed \n                   </div>\n                 </div> -->\n                    <div class=\"form-group row\">\n                        <label for=\"photo\" class=\"label col-sm-3 col-form-label\">Photo *</label>\n                        <div class=\"col-sm-9\">\n                            <input nbInput fullWidth  type=\"file\" id=\"photo\" (change)=\"onPhotoChange($event)\" formControlName=\"photo\"\n                                accept=\"image/*\" multiple=\"false\">\n                            <ng-container\n                                *ngIf=\"AddBannerForm.controls.photo.touched && AddBannerForm.controls.photo.errors\">\n                                <p class=\"caption status-danger\" *ngIf=\"AddBannerForm.controls.photo.errors.required\">\n                                    File size exceeds the limit of 1MB</p>\n                            </ng-container>\n                        </div>\n                    </div>\n\n\n\n                    <div class=\"form-group row\">\n                        <label for=\"fdate\" class=\"label col-sm-3 col-form-label\">From Date *</label>\n                        <div class=\"col-sm-9\">\n                            <input nbInput fullWidth [nbDatepicker]=\"fromDatepicker\" formControlName=\"fdate\">\n                            <nb-datepicker #fromDatepicker></nb-datepicker>\n                            <ng-container\n                                *ngIf=\"AddBannerForm.controls.fdate.touched && AddBannerForm.controls.fdate.errors\">\n                                <p class=\"caption status-danger\" *ngIf=\"AddBannerForm.controls.fdate.errors.required\">\n                                    From Date is required </p>\n                            </ng-container>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label for=\"tdate\" class=\"label col-sm-3 col-form-label\">To Date *</label>\n                        <div class=\"col-sm-9\">\n                            <input nbInput fullWidth [nbDatepicker]=\"toDatepicker\" formControlName=\"tdate\">\n                            <nb-datepicker #toDatepicker></nb-datepicker>\n                            <ng-container\n                                *ngIf=\"AddBannerForm.controls.tdate.touched && AddBannerForm.controls.tdate.errors\">\n                                <p class=\"caption status-danger\" *ngIf=\"AddBannerForm.controls.tdate.errors.required\">\n                                    To Date is required </p>\n                            </ng-container>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <div class=\"offset-sm-3 col-sm-9\">\n                            <button type=\"submit\" nbButton status=\"primary\"\n                                [disabled]=\"submitted || !AddBannerForm.valid\">Submit</button>\n                            &nbsp;&nbsp;\n                            <button nbButton status=\"danger\" (click)=\"backToBannerList()\"\n                                routerLinkActive=\"router-link-active\"><b>\n                                    Cancel\n                                </b></button>\n                        </div>\n                    </div>\n                </form>\n\n            </nb-card-body>\n        </nb-card>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { NbDialogRef } from '@nebular/theme';\n\n@Component({\n  selector: 'ngx-banner-delete',\n  template:  \n`  <nb-card>\n      <nb-card-header class=\"text-center\">\n        <b>Delete Confirmation</b>\n      </nb-card-header>\n      <nb-card-body>\n        <p>Are you sure that you want to delete this <b>{{ user.name }}</b>?</p>\n        <ul>\n          <li><strong>From Date:</strong> {{ user.fdate | date: 'dd/MM/yyyy' }}</li>\n          <li><strong>To date:</strong> {{ user.tdate | date: 'dd/MM/yyyy' }}</li>\n        </ul>\n      </nb-card-body>\n      <nb-card-footer class=\"text-center\">\n        <button nbButton status=\"success\" (click)=\"deleteBestperformer()\">Delete</button>&nbsp;&nbsp;&nbsp;\n        <button nbButton status=\"primary\" (click)=\"close()\">Cancel</button>\n      </nb-card-footer>\n    </nb-card>\n`})\n\nexport class BannerDeleteComponent implements OnInit {\n\n   user: any;\n\n   constructor(protected dialogRef: NbDialogRef<BannerDeleteComponent>) {}\n\n   ngOnInit(): void {}\n\n  close() {\n    this.dialogRef.close(false); // Close the delete dialog without approving\n  }\n\n  deleteBestperformer() {\n    this.dialogRef.close(this.user); // Close the delete dialog and trigger the approval action\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NbDialogService, NbToastrService } from '@nebular/theme';\nimport { ConfirmationService } from 'primeng/api';\nimport { ROUTE_PATH } from '../../../shared/constants/route-path.constant';\nimport { HttpStatusCode } from '@angular/common/http';\nimport { BannerService } from '../services/banner.service';\nimport { BannerDeleteComponent } from './banner-delete.component';\n\n\n@Component({\n  selector: 'ngx-banner-get',\n  templateUrl: './banner-get.component.html',\n  styleUrls: ['./banner-get.component.scss']\n})\nexport class BannerGetComponent implements OnInit {\n\n  itemsPerPage: any[] = [10, 25, 50];\n  banner: any;\n  columns: any[]; // for table columns\n\n  first = 0;\n  rows = 10;\n\n  constructor(\n    private dialogConfirmService: ConfirmationService,\n    private toastrService: NbToastrService,\n    private router: Router,\n    private aRoute: ActivatedRoute,\n    private bannerservice: BannerService,\n    private dialogService: NbDialogService\n  ) { }\n\n  ngOnInit() {\n    // table   with their respective field name and header value\n    this.columns = [\n      { field: \"photo\", header: \"Photo\", show: true, sort: true, },\n      { field: \"fdate\", header: \"From Date\", show: true, sort: true, },\n      { field: \"tdate\", header: \"To Date\", show: true, sort: true, },\n    ];\n\n    this.bannerList();\n  }\n  /**\n * create Banner\n * @param\n * @returns\n */\n  createBanner() {\n\n    this.bannerservice.setBannerDetails(null);\n    this.router.navigate([\n      ROUTE_PATH.ADMIN,\n      ROUTE_PATH.BANNER,\n      ROUTE_PATH.BANNERS.CREATE,\n    ]);\n  }\n\n  /**\n   * Edit Banner\n   * @param user\n   * @returns\n   */\n  editBanner(user: any) {\n    this.bannerservice.setBannerDetails(user); // Pass the selected user details to the service\n    this.router.navigate([\n      ROUTE_PATH.ADMIN,\n      ROUTE_PATH.BANNER,\n      ROUTE_PATH.BANNERS.EDIT,\n      user.id\n    ]);\n  }\n\n  /**\n   * Delete Banner confirmation\n   * @param user\n   * @returns\n   */\n  confirmDelete(user: any) {\n    this.dialogService.open(BannerDeleteComponent, {\n      context: { user },\n    }).onClose.subscribe((result) => {\n      if (result) {\n        this.deleteBanner(user.id);\n        console.log(user)\n      }\n    });\n  }\n\n  /**\n   * Delete Banner\n   * @param id\n   * @returns\n   */\n  deleteBanner(id) {\n    // let deletePostData = { userId: userId };\n\n    this.bannerservice.deleteBanner(id).subscribe(\n      (response) => {\n        this.bannerList();\n        if (HttpStatusCode.Ok) {\n          this.toastrService.show(response[\"message\"], \"Success\", {\n            status: \"success\",\n            duration: 8000,\n          });\n        } else {\n          this.toastrService.show(response[\"message\"], \"Warning\", {\n            status: \"warning\",\n            duration: 8000,\n          });\n        }\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n\n  /**\n   * Banner List\n   * @param null\n   * @returns\n   */\n\n  bannerList() {\n\n    //this.banner  =this.staticUsers;\n    this.bannerservice.getBannerList().subscribe(\n      (response) => {\n        console.log(response)\n        this.banner = response;\n        // if (HttpStatusCode.Ok) {\n        //   this.toastrService.show(response[\"message\"], \"Success\", {\n        //     status: \"success\",\n        //     duration: 8000,\n        //   });\n        // } else {\n        //   this.toastrService.show(response[\"message\"], \"Warning\", {\n        //     status: \"warning\",\n        //     duration: 8000,\n        //   });\n        // }\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n\n}\n","<nb-card class=\"inline-form-card full-card\">\n\n    <p-confirmDialog [style]=\"{width: '50vw'}\"></p-confirmDialog>\n    <nb-card-header>\n        <div class=\"row\">\n            <div class=\"col-md-9 text-center bold-text\">Banner List</div>\n            <div class=\"col-md-3\">\n                <button class=\"btn btn-sm btn-success\" (click)=\"createBanner()\">Create Banner</button>\n            </div>\n        </div>\n    </nb-card-header>\n    <nb-card-body>\n\n        <div class=\"card\">\n            <p-table [value]=\"banner\" [paginator]=\"true\" [rows]=\"rows\" [showCurrentPageReport]=\"true\"\n                [autoLayout]=\"true\" [rowsPerPageOptions]=\"itemsPerPage\">\n                <ng-template pTemplate=\"header\">\n                    <tr>\n                        <ng-container *ngFor=\"let col of columns\">\n                            <th *ngIf=\"col.show\" [pSortableColumn]=\"(col.sort==true)? col.field:false\"\n                                [style.width.px]=\"col.weight\" [style.height.px]=\"col.height\"\n                                [class]=\"col.field+'-campaigns'\" class=\"text-center\">\n                                <p-sortIcon *ngIf=\"col.sort==true\" [field]=\"col.field\" class=\"sort-icon\"\n                                    [id]=\"col.field+'-sort'\">\n                                </p-sortIcon>\n                                <span>{{col.header}}</span>\n                            </th>\n                        </ng-container>\n                        <th class=\"text-center\">Actions</th>\n                    </tr>\n                </ng-template>\n                <ng-template pTemplate=\"body\" let-user>\n                    <!-- Body changes based on the new fields -->\n                    <tr>\n                        <td class=\"text-center\">\n                            <img [src]=\"user.image\" width=\"100\" height=\"100\" loading=\"lazy\" fetchpriority=\"high\" />\n                            <!-- 'data:image/jpeg;base64,' + user.image -->\n                            <!-- data:image/jpeg;charset=utf-8;base64, -->\n                        </td>\n                        <td class=\"text-center\">{{ user.fdate | date: 'dd/MM/yyyy' }}</td>\n                        <td class=\"text-center\">{{ user.tdate | date: 'dd/MM/yyyy' }}</td>\n                        <td class=\"text-center action\">\n                            <button (click)=\"editBanner(user)\" routerLinkActive=\"router-link-active\" nbTooltip=\"Edit\"\n                                nbTooltipPlacement=\"top\" class=\"btn btn-outline-primary btn-sm action-button\">\n                                <nb-icon icon=\"edit\" pack=\"eva\" class=\"action-icons\"></nb-icon>\n                            </button>&nbsp;\n                            <button nbTooltip=\"Delete\" (click)=\"confirmDelete(user)\" nbTooltipPlacement=\"top\"\n                                class=\"btn btn-outline-danger btn-sm action-button\">\n                                <nb-icon icon=\"close\" pack=\"eva\" class=\"action-icons\"></nb-icon>\n                            </button>&nbsp;\n                        </td>\n                    </tr>\n                </ng-template>\n            </p-table>\n        </div>\n    </nb-card-body>\n</nb-card>","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { BannerGetComponent } from './banner-get/banner-get.component';\nimport { BannerAddEditComponent } from './banner-add-edit/banner-add-edit.component';\n\nconst routes: Routes = [\n     {\n    path: 'get',\n    component: BannerGetComponent,\n  },\n  {\n    path: 'create',\n    component: BannerAddEditComponent,\n  },\n  {\n    path: 'edit/:id',\n    component: BannerAddEditComponent,\n  },\n  {\n    path: '',\n    redirectTo: 'get', // Default route\n    component: BannerGetComponent,\n  },\n\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class BannerRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  NbActionsModule,\n  NbAlertModule,\n  NbCalendarKitModule,\n  NbCalendarModule,\n  NbCalendarRangeModule,\n  NbFormFieldModule,\n  NbProgressBarModule,\n  NbSpinnerModule,\n  NbTooltipModule,\n  NbCheckboxModule,\n  NbButtonModule,\n  NbAccordionModule,\n  NbCardModule,\n  NbDialogModule,\n  NbListModule,\n  NbRouteTabsetModule,\n  NbStepperModule,\n  NbTabsetModule,\n  NbUserModule,\n  NbIconModule,\n  NbInputModule,\n  NbTreeGridModule,\n  NbSelectModule,\n  NbToggleModule, \n  NbContextMenuModule,\n  NbDatepickerModule,\n} from '@nebular/theme';\n\nimport { ThemeModule } from '../../@theme/theme.module';\n\n// Interceptor\nimport { NbAuthJWTInterceptor, HttpErrorInterceptor } from '../../auth/interceptor/jwt-interceptor';\n\n// Primeng\nimport { TableModule } from 'primeng/table';\nimport {ButtonModule} from 'primeng/button';\nimport { DialogModule } from 'primeng/dialog';\nimport { ConfirmDialogModule } from 'primeng/confirmdialog';\nimport { ConfirmationService } from 'primeng/api';\n\n\nimport { BannerAddEditComponent } from './banner-add-edit/banner-add-edit.component';\nimport { BannerGetComponent } from './banner-get/banner-get.component';\nimport { BannerRoutingModule } from './banner-routing.module';\nimport { BannerDeleteComponent } from './banner-get/banner-delete.component';\n\n\n\n@NgModule({\n  declarations: [\n    BannerGetComponent,\n    BannerAddEditComponent,\n    BannerDeleteComponent\n  ],\n  imports: [\n    CommonModule,\n    BannerRoutingModule,\n    HttpClientModule,\n    NbActionsModule,\n    NbAlertModule,\n    NbCalendarKitModule,\n    NbCalendarModule,\n    NbCalendarRangeModule,\n    NbDatepickerModule.forRoot(),\n    NbFormFieldModule,\n    NbProgressBarModule,\n    NbSpinnerModule,\n    NbTooltipModule,\n    NbCheckboxModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ThemeModule,\n    NbTabsetModule,\n    NbRouteTabsetModule,\n    NbStepperModule,\n    NbCardModule,\n    NbButtonModule,\n    NbListModule,\n    NbAccordionModule,\n    NbUserModule,\n    NbIconModule,\n    NbInputModule,\n    NbTreeGridModule,\n    NbSelectModule,\n    NbToggleModule,\n    NbContextMenuModule,\n    NbDialogModule.forRoot(),\n    TableModule,\n    ButtonModule,\n    ConfirmDialogModule,\n    DialogModule,\n  ],\n  providers: [\n    ConfirmationService, \n    { provide: HTTP_INTERCEPTORS, useClass: NbAuthJWTInterceptor, multi: true }, \n    { provide: HTTP_INTERCEPTORS, useClass: HttpErrorInterceptor, multi: true }\n  ],\n})\nexport class BannerModule { }\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { NbAuthJWTToken, NbAuthService } from '@nebular/auth';\nimport { BehaviorSubject, Observable, of, throwError } from 'rxjs';\nimport { API_END_POINTS, getApiEndPoint } from '../../../shared/constants/api-constant';\nimport { switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BannerService {\n\n  banner = {};\n\n  constructor(\n    private bannerServicehttp: HttpClient,\n    private authService: NbAuthService\n  ) {\n    this.authService.onTokenChange().subscribe((token: NbAuthJWTToken) => {\n      if (token.isValid()) {\n        this.banner = token.getPayload(); // here we receive a payload from the token and assigns it to our `banner` variable\n      }\n    });\n  }\n\n  //pass select banner Details in banner-Edit\n\n  private bannerDetails = new BehaviorSubject<any>(null);\n\n  setBannerDetails(user: any) {\n    this.bannerDetails.next(user);\n  }\n\n  getBannerDetails() {\n    return this.bannerDetails.asObservable();\n  }\n\n  /**\n   * Banner List\n   * @returns\n   */\n\n  getBannerList(): Observable<any> {\n    let apiURL = getApiEndPoint(API_END_POINTS.BANNER.GET);\n    return this.bannerServicehttp.get(apiURL).pipe(\n      switchMap((result: any) => {\n        if (result) {\n          return of(result);\n        } else {\n          return throwError(result);\n        }\n      })\n    );\n  }\n\n  /**\n   * Delete Banner\n   * @param id\n   * @returns\n   *\n   */\n  deleteBanner(id: number): Observable<any> {\n    let apiURL = getApiEndPoint(`${API_END_POINTS.BANNER.DELETE}?id=${id}`);\n    return this.bannerServicehttp.put(apiURL, null).pipe(\n      switchMap((result: any) => {\n        if (result) {\n          return of(result);\n        } else {\n          return throwError(result);\n        }\n      })\n    );\n  }\n\n\n  /**\n   * Update Banner details\n   * @param requestBody\n   * @returns\n   *\n   */\n  updateBanner(formData): Observable<any> {\n    let apiURL = getApiEndPoint(`${API_END_POINTS.BANNER.UPDATE}`);\n    return this.bannerServicehttp.put(apiURL, formData).pipe(\n      switchMap((result: any) => {\n        if (result) {\n          return of(result);\n        } else {\n          return throwError(result);\n        }\n      })\n    );\n  }\n\n\n\n  /**\n   * Create Banner\n   * @param formData\n   * @returns\n   *\n   */\n\n  CreateBanner(formData): Observable<any> {\n    let apiURL = getApiEndPoint(`${API_END_POINTS.BANNER.ADD}`);\n    return this.bannerServicehttp.post(apiURL, formData).pipe(\n      switchMap((result: any) => {\n        if (result) {\n          return of(result);\n        } else {\n          return throwError(result);\n        }\n      })\n    );\n  }\n}\n"],"names":[],"sourceRoot":"webpack:///"}