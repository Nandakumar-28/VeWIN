{"version":3,"file":"src_app_admin_sales_sales_module_ts.js","mappings":"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","sources":["./src/app/admin/sales/sales-list/sales-list.component.ts","./src/app/admin/sales/sales-list/sales-list.component.html","./src/app/admin/sales/sales-routing.module.ts","./src/app/admin/sales/sales.module.ts","./src/app/admin/sales/services/sales.service.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NbDialogService, NbToastrService } from '@nebular/theme';\nimport { ConfirmationService } from 'primeng/api';\nimport { ROUTE_PATH } from '../../../shared/constants/route-path.constant';\nimport { HttpStatusCode } from '@angular/common/http';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { BestperformerService } from '../../bestperformer/services/bestperformer.service';\nimport { debounceTime, switchMap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { SalesService } from '../services/sales.service';\nimport { PaymentsService } from '../../payments/services/payments.service';\n@Component({\n  selector: 'ngx-sales-list',\n  templateUrl: './sales-list.component.html',\n  styleUrls: ['./sales-list.component.scss']\n})\nexport class SalesListComponent implements OnInit {\n\n  AddSaleForm: FormGroup;\n\n  //Change value to hide table\n  showTable = false;\n  data_loading = false;\n\n  itemsPerPage: any[] = [10, 25, 50];\n  users: any;\n  columns: any[]; // for table columns\n\n  first = 0;\n  rows = 10;\n\n  //summit button size \n  small = 'small';\n\n  results: string[];\n\n  constructor(\n    private toastrService: NbToastrService,\n    private router: Router,\n    private aRoute: ActivatedRoute,\n    private saleService: SalesService,\n    private dialogService: NbDialogService,\n    private formBuilder: FormBuilder,\n    private userService: BestperformerService,\n    private paymentService: PaymentsService,\n  ) { }\n\n  ngOnInit() {\n\n    this.AddSaleFormInitialize();\n\n    // Add event listener to name field Change value to hide table\n    this.AddSaleForm.get('name')?.valueChanges.subscribe(() => {\n      this.showTable = true;\n    });\n\n    // Add event listener to monthAndYear field Change value to hide table \n    this.AddSaleForm.get('monthAndYear')?.valueChanges.subscribe(() => {\n      this.showTable = true;\n    });\n\n    // table   with their respective field name and header value\n    this.columns = [\n      { field: \"date\", header: \"Date\", show: true, sort: true },\n      { field: \"app\", header: \"App\", show: true, sort: true },\n      { field: \"sale\", header: \"Sales\", show: true, sort: true },\n      { field: \"saleReturn\", header: \"Sales Return\", show: true, sort: true },\n    ];\n\n    // Subscribe to changes in the 'name' control and make API requests\n    this.AddSaleForm.get('name').valueChanges.pipe(\n      debounceTime(300),\n      switchMap((name) => {\n        if (name && name.length >= 3) {\n          return this.userService.getReferralIds(name);\n        } else {\n          // Return an empty observable if the input length is less than 3 characters\n          return of([]);\n        }\n      })\n    ).subscribe((response) => {\n      this.results = response;\n    });\n  }\n\n  onNameInputChange(event: any) {\n    const name = event.query\n    if (name.length >= 3) {\n      this.userService.getReferralIds(name).subscribe((response) => {\n        let data = []\n        response.forEach((item: any) => {\n          data.push(item.idAndName)\n        })\n        this.results = data\n      });\n    } else {\n      // Clear the results if the input length is less than 3 characters\n      this.results = [];\n    }\n  }\n\n  /**\n   * User Form Initialize\n   */\n\n  AddSaleFormInitialize() {\n    this.AddSaleForm = this.formBuilder.group({\n      name: [\"\", [Validators.required]],\n      monthAndYear: [\"\", [Validators.required]],\n      // refid: [0], // Add the refid control\n    });\n  }\n\n\n  /**\n   * create Payment\n   * @param\n   * @returns\n   */\n  makePayment() {\n    this.paymentService.setUserDetails(null);\n    this.router.navigate([\n      ROUTE_PATH.ADMIN,\n      ROUTE_PATH.PAYMENT,\n      ROUTE_PATH.PAYMENTS.CREATE,\n    ]);\n  }\n\n\n  /**\n   * Payment List\n   * @param null\n   * @returns\n   */\n\n  onSubmit() {\n\n    const selectedName = this.AddSaleForm.value.name;\n    const selectedDate = this.AddSaleForm.value.monthAndYear;\n\n    if (selectedDate && selectedName) {\n      // Convert the month to a string representation (e.g., January, February)\n      const month = new Intl.DateTimeFormat('en-US', { month: 'long' }).format(selectedDate);\n      const year = selectedDate.getFullYear().toString(); // Convert the year to a string\n      const customerId = selectedName.split('-')[0]; // Extract the ID from the selectedName\n\n      const requestBody = {\n        customerId: customerId,\n        month: month,\n        year: year\n      };\n\n      this.salesApiRequest(requestBody);\n    } else if (selectedName) {\n\n      const customerId = selectedName.split('-')[0]; // Extract the ID from the selectedName\n\n      const requestBody = {\n        customerId: customerId,\n        month: \"\",\n        year: \"\"\n      };\n\n      this.salesApiRequest(requestBody);\n    } else if (selectedDate) {\n      // Convert the month to a string representation (e.g., January, February)\n      const month = new Intl.DateTimeFormat('en-US', { month: 'long' }).format(selectedDate);\n      const year = selectedDate.getFullYear().toString(); // Convert the year to a string\n      // If the name is not selected, send the API request with an empty name\n      const requestBody = {\n        customerId: \"\",\n        month: month,\n        year: year\n      };\n      this.salesApiRequest(requestBody);\n    }\n\n  }\n\n  // Extracted the API request logic to a separate function\n  private salesApiRequest(requestBody: any) {\n    this.saleService.getSaleList(requestBody)\n      .subscribe((response) => {\n        this.users = response;\n        this.showTable = false;\n      });\n  }\n}\n\n","<nb-card class=\"inline-form-card full-card\">\n\n    <p-confirmDialog [style]=\"{width: '50vw'}\"></p-confirmDialog>\n    <nb-card-header>\n        <div class=\"row\">\n            <div class=\"col-md-9 text-center bold-text\">Sales List</div>\n            <div class=\"col-md-3\">\n                <button class=\"btn btn-sm btn-success\" (click)=\"makePayment()\">Make Payment</button>\n            </div>\n        </div><br>\n        <div class=\"card  text-center\">\n            <form [formGroup]=\"AddSaleForm\" (ngSubmit)=\"onSubmit()\"> <br>\n                <div class=\"form-group row\">\n                    <label for=\"name\" class=\"label col-sm-3 col-form-label\" > Search Customer Name *</label>\n                    <div class=\"col-sm-3\">\n                        <span class=\"p-fluid\">\n                            <p-autoComplete formControlName=\"name\" [suggestions]=\"results\" [forceSelection]=\"true\"\n                                (completeMethod)=\"onNameInputChange($event)\" [minLength]=\"3\" placeholder=\"Enter minimum 3 letters\">\n                            </p-autoComplete>\n                        </span>\n                        <ng-container *ngIf=\"AddSaleForm.controls.name.touched && AddSaleForm.controls.name.errors\">\n                            <p class=\"caption status-danger\" *ngIf=\"AddSaleForm.controls.name.errors.required\">\n                                Name is required / Only select Name</p>\n                        </ng-container>\n                    </div>\n\n\n                    <label for=\"monthAndYear\" class=\"label col-sm-2 col-form-label\"> Select Year-Month *</label>\n                    <div class=\"col-sm-2\">\n                        <p-calendar formControlName=\"monthAndYear\" view=\"month\" dateFormat=\"mm/yy\"\n                            [readonlyInput]=\"true\"></p-calendar>\n                        <ng-container\n                            *ngIf=\"AddSaleForm.controls.monthAndYear.touched && AddSaleForm.controls.monthAndYear.errors\">\n                            <p class=\"caption status-danger\" *ngIf=\"AddSaleForm.controls.monthAndYear.errors.required\">\n                                Year-Month is required </p>\n                        </ng-container>\n                    </div>\n\n                    <div class=\" col-sm-2\">\n                        <button type=\"submit\" nbButton outline status=\"success\" size=\"small\">Submit</button>\n                    </div>\n                </div>\n            </form>\n        </div><br>\n    </nb-card-header>\n    <nb-card-body>\n        <div class=\"text-center\" *ngIf=\"!users || users.length === 0 || showTable \n\">\n            <h5>No Data Found !</h5>\n        </div>\n        <div class=\"card\" *ngIf=\"users && users.length > 0 && !showTable\">\n            <div class=\"card\">\n                <p-table [value]=\"users\" [resizableColumns]=\"true\" [paginator]=\"true\" [rows]=\"rows\"\n                    [showCurrentPageReport]=\"true\" [autoLayout]=\"true\" [rowsPerPageOptions]=\"itemsPerPage\"\n                    [scrollable]=\"true\" scrollHeight=\"400px\">\n                    <ng-template pTemplate=\"header\">\n                        <tr>\n                            <ng-container *ngFor=\"let col of columns\">\n                                <th *ngIf=\"col.show\" pResizableColumn\n                                    [pSortableColumn]=\"(col.sort==true)? col.field:false\"\n                                    [class]=\"col.field+'-campaigns'\" class=\"text-center\">\n                                    <p-sortIcon *ngIf=\"col.sort==true\" [field]=\"col.field\" class=\"sort-icon\"\n                                        [id]=\"col.field+'-sort'\">\n                                    </p-sortIcon>\n                                    <span>{{col.header}}</span>\n                                </th>\n                            </ng-container>\n                            <!-- <th class=\"text-center\">Actions</th> -->\n                        </tr>\n                    </ng-template>\n                    <ng-template pTemplate=\"body\" let-user>\n                        <tr>\n                            <td nbTooltip=\"{{ user.date }}\" nbTooltipPlacement=\"top\">{{ user.date }}</td>\n                            <td nbTooltip=\"{{ user.app }}\" nbTooltipPlacement=\"top\">{{ user.app }}</td>\n                            <td nbTooltip=\"{{ user.sales }}\" nbTooltipPlacement=\"top\">{{ user.sales }}</td>\n                            <td nbTooltip=\"{{ user.salesReturn }}\" nbTooltipPlacement=\"top\">{{ user.salesReturn }}</td>\n                        </tr>\n                    </ng-template>\n                    <ng-template pTemplate=\"emptymessage\">\n                        <tr>\n                            <td colspan=\"3\" class=\"text-center\">No Data Found.</td>\n\n                        </tr>\n                    </ng-template>\n                </p-table>\n            </div>\n        </div>\n    </nb-card-body>\n</nb-card>","import { NgModule } from '@angular/core';\nimport { SalesListComponent } from './sales-list/sales-list.component';\nimport { RouterModule, Routes } from '@angular/router';\n\n\nconst routes: Routes = [\n  {\n    path: 'list',\n    component: SalesListComponent,\n  },\n  {\n    path: '',\n    redirectTo: 'list', // Default route\n    pathMatch: 'full',\n  },\n  {\n    path: '**',\n    redirectTo: 'list', // Default route\n    pathMatch: 'full',\n  },\n\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SalesRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  NbActionsModule,\n  NbAlertModule,\n  NbCalendarKitModule,\n  NbCalendarModule,\n  NbCalendarRangeModule,\n  NbDatepickerModule,\n  NbFormFieldModule,\n  NbProgressBarModule,\n  NbSpinnerModule,\n  NbTooltipModule,\n  NbCheckboxModule,\n  NbButtonModule,\n  NbAccordionModule,\n  NbCardModule,\n  NbDialogModule,\n  NbListModule,\n  NbRouteTabsetModule,\n  NbStepperModule,\n  NbTabsetModule,\n  NbUserModule,\n  NbIconModule,\n  NbInputModule,\n  NbTreeGridModule,\n  NbSelectModule,\n  NbToggleModule,\n  NbContextMenuModule,\n} from '@nebular/theme';\n\nimport { ThemeModule } from '../../@theme/theme.module';\n\n// Interceptor\nimport { NbAuthJWTInterceptor, HttpErrorInterceptor } from '../../auth/interceptor/jwt-interceptor';\n\n// Primeng\nimport { TableModule } from 'primeng/table';\nimport { ButtonModule } from 'primeng/button';\nimport { DialogModule } from 'primeng/dialog';\nimport { ConfirmDialogModule } from 'primeng/confirmdialog';\nimport { ConfirmationService } from 'primeng/api';\nimport { AutoCompleteModule } from 'primeng/autocomplete';\n\nimport { SalesListComponent } from './sales-list/sales-list.component';\nimport { SalesRoutingModule } from './sales-routing.module';\nimport { CalendarModule } from 'primeng/calendar';\n\n\n\n@NgModule({\n  declarations: [SalesListComponent],\n  imports: [\n    CommonModule,\n    SalesRoutingModule,\n    CommonModule,\n    HttpClientModule,\n    NbActionsModule,\n    NbAlertModule,\n    NbCalendarKitModule,\n    NbCalendarModule,\n    NbCalendarRangeModule,\n    NbDatepickerModule.forRoot(),\n    NbFormFieldModule,\n    NbProgressBarModule,\n    NbSpinnerModule,\n    NbTooltipModule,\n    NbCheckboxModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ThemeModule,\n    NbTabsetModule,\n    NbRouteTabsetModule,\n    NbStepperModule,\n    NbCardModule,\n    NbButtonModule,\n    NbListModule,\n    NbAccordionModule,\n    NbUserModule,\n    NbIconModule,\n    NbInputModule,\n    NbTreeGridModule,\n    NbSelectModule,\n    NbToggleModule,\n    NbContextMenuModule,\n    NbDialogModule.forRoot(),\n    TableModule,\n    ButtonModule,\n    ConfirmDialogModule,\n    DialogModule,\n    AutoCompleteModule,\n    CalendarModule,\n  ],\n  providers: [\n    ConfirmationService,\n    { provide: HTTP_INTERCEPTORS, useClass: NbAuthJWTInterceptor, multi: true },\n    { provide: HTTP_INTERCEPTORS, useClass: HttpErrorInterceptor, multi: true }\n  ],\n})\nexport class SalesModule { }\n","import { Injectable } from '@angular/core';\nimport { API_END_POINTS, getApiEndPoint } from '../../../shared/constants/api-constant';\nimport { HttpClient } from '@angular/common/http';\nimport { NbAuthJWTToken, NbAuthService } from '@nebular/auth';\nimport { switchMap } from 'rxjs/operators';\nimport { BehaviorSubject, Observable, of, throwError } from 'rxjs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SalesService {\n  user = {};\n\n  constructor(\n    private saleServicehttp: HttpClient,\n    private authService: NbAuthService\n  ) {\n    this.authService.onTokenChange().subscribe((token: NbAuthJWTToken) => {\n      if (token.isValid()) {\n        this.user = token.getPayload(); // here we receive a payload from the token and assigns it to our `user` variable\n      }\n    });\n  }\n   /**\n   * Payment List\n   * @returns\n   */\n\n  getSaleList(requestBody): Observable<any> {\n    let apiURL = getApiEndPoint(API_END_POINTS.SALES.GET);\n    return this.saleServicehttp.post(apiURL,requestBody).pipe(\n      switchMap((result: any) => {\n        if (result) {\n          return of(result);\n        } else {\n          return throwError(result);\n        }\n      })\n    );\n  }\n\n}\n"],"names":[],"sourceRoot":"webpack:///"}