{"version":3,"file":"src_app_admin_payments_payments_module_ts.js","mappings":"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","sources":["./src/app/admin/payments/payment-add-edit/payment-add-edit.component.ts","./src/app/admin/payments/payment-add-edit/payment-add-edit.component.html","./src/app/admin/payments/payments-list/payment-delete.component.ts","./src/app/admin/payments/payments-list/payments-list.component.ts","./src/app/admin/payments/payments-list/payments-list.component.html","./src/app/admin/payments/payments-routing.module.ts","./src/app/admin/payments/payments.module.ts"],"sourcesContent":["/** \n* This file contains Payment Details add-edit related functions\n* dev: T.Nanda Kumar\n*/\n\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { debounceTime, switchMap } from 'rxjs/operators';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NbToastrService } from '@nebular/theme';\nimport { DatePipe } from '@angular/common';\nimport { Subscription, of } from 'rxjs';\nimport { HttpStatusCode } from '@angular/common/http';\nimport { ROUTE_PATH } from '../../../shared/constants/route-path.constant';\nimport { PaymentsService } from '../services/payments.service';\nimport { BestperformerService } from '../../bestperformer/services/bestperformer.service';\n\n@Component({\n  selector: 'ngx-payment-add-edit',\n  templateUrl: './payment-add-edit.component.html',\n  styleUrls: ['./payment-add-edit.component.scss']\n})\nexport class PaymentAddEditComponent implements OnInit {\n\n  AddPaymentForm: FormGroup;\n  GetSalesForm: FormGroup;\n\n  //Submit click to hide\n  submitted = false;\n  data_loading = false;\n\n  //userlist pass user data\n  paymentDetails: any;\n  page_title: string;\n\n  //summit button size \n  small = 'small';\n\n  results: string[];\n\n  // totalSales response\n  sales: any;\n\n  private paymentSubscription: Subscription;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private aRoute: ActivatedRoute,\n    private paymentService: PaymentsService,\n    private toastrService: NbToastrService,\n    private datePipe: DatePipe,\n    private userService: BestperformerService,\n\n  ) { }\n\n\n  ngOnInit(): void {\n    this.AddPaymentFormInitialize();\n\n    if (this.router.url.indexOf(\"edit\") !== -1) {\n      // this.data_loading = true;\n      const id = this.aRoute.snapshot.paramMap.get(\"title\");\n      this.page_title = \"Edit Payment Details\";\n\n      // Disable form controls for editing\n      this.GetSalesForm.get('cid').disable();\n      this.GetSalesForm.get('monthAndYear').disable();\n\n    } else {\n      this.page_title = \"Add Payment Details\";\n      this.AddPaymentForm.reset();\n    }\n\n\n    // Check if user details are passed user list, service to user-edit\n\n    this.paymentSubscription = this.paymentService.getUserDetails().subscribe(user => {\n      if (user) {\n        this.paymentDetails = user;\n        // Pre-fill the form with user details\n        this.AddPaymentForm.patchValue({\n          salesAmount: this.paymentDetails.salesAmount,\n          dateOfPayment: new Date(this.paymentDetails.dateOfPayment),\n          bank: this.paymentDetails.bank,\n          paymentDetails: this.paymentDetails.paymentDetails,\n          remarks: this.paymentDetails.remarks,\n        });\n\n        // Extracted year and month values from the paymentDetails\n        const year = this.paymentDetails.year;\n        const month = this.paymentDetails.month;\n\n        // Convert the month string to a numerical representation (e.g., \"January\" to 0, \"February\" to 1, etc.)\n        const monthIndex = new Date(`${month} 1, 2000`).getMonth();\n\n        this.GetSalesForm.patchValue({\n          cid: this.paymentDetails.cid,\n          monthAndYear: new Date(year, monthIndex)\n        });\n      } else {\n        this.AddPaymentForm.reset(); // Ensure the form is reset when no user details are present\n      }\n    });\n    // Subscribe to changes in the 'name' control and make API requests\n    this.GetSalesForm.get('cid').valueChanges.pipe(\n      debounceTime(300),\n      switchMap((cid) => {\n        // Make the API request only if the name has at least 3 characters\n        if (cid.length >= 3) {\n          return this.userService.getReferralIds(cid);\n        } else {\n          // Return an empty observable if the input length is less than 3 characters\n          return of([]);\n        }\n      })\n    ).subscribe((response) => {\n      this.results = response;\n    });\n\n  }\n\n  ngOnDestroy(): void {\n    // Unsubscribe to prevent multiple subscriptions when leaving the component\n    this.paymentSubscription.unsubscribe();\n  }\n\n  /**\n   * Payment Details Form Initialize\n   */\n\n  AddPaymentFormInitialize() {\n    this.AddPaymentForm = this.formBuilder.group({\n      salesAmount: [\"\", [Validators.required]],\n      dateOfPayment: [new Date(), [Validators.required]],\n      bank: [\"\", [Validators.required]],\n      paymentDetails: [\"\", [Validators.required]],\n      remarks: [\"\", [Validators.required, Validators.maxLength(100)]],\n    });\n    this.GetSalesForm = this.formBuilder.group({\n      cid: [\"\", [Validators.required]],\n      monthAndYear: [\"\", [Validators.required]],\n    });\n\n  }\n\n  onNameInputChange(event: any) {\n    const cid = event.query\n    // Make the API request only if the name has at least 3 characters\n    if (cid.length >= 3) {\n      this.userService.getReferralIds(cid).subscribe((response) => {\n        let data = []\n        response.forEach((item: any) => {\n          data.push(item.idAndName)\n        })\n        this.results = data\n      });\n    } else {\n      // Clear the results if the input length is less than 3 characters\n      this.results = [];\n    }\n  }\n\n  totalSales() {\n    // Disable form controls for editing\n    this.GetSalesForm.get('cid').disable();\n    this.GetSalesForm.get('monthAndYear').disable();\n\n    if (this.GetSalesForm.invalid) {\n      return;\n    }\n\n    const selectedResult = this.GetSalesForm.value.cid;\n    const customerId = selectedResult.split('-')[0]; // Extract the ID from the result\n\n    // Extract the month and year from the selected date\n    const selectedDate = this.GetSalesForm.value.monthAndYear;\n\n    // Convert the month to a string representation (e.g., January, February)\n    const month = new Intl.DateTimeFormat('en-US', { month: 'long' }).format(selectedDate);\n    const year = selectedDate.getFullYear().toString(); // Convert the year to a string\n    const requestBody = {\n      customerId: customerId,\n      month: month,\n      year: year\n    };\n\n    this.paymentService.getTotalSales(requestBody)\n      .subscribe((response) => {\n        this.sales = response;\n        // Pre-fill the form with user details\n        this.AddPaymentForm.patchValue({\n          salesAmount: this.sales.totalSales,\n        });\n      });\n  }\n\n\n\n  onSubmit() {\n    this.submitted = true;\n\n    if (this.AddPaymentForm.invalid) {\n      return;\n    }\n\n    // Format the date strings before sending them to the server\n    const formattedDate = this.datePipe.transform(this.AddPaymentForm.value.dateOfPayment, \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\n\n    // Get the current date and time in the desired format\n    const modifiedDate = this.datePipe.transform(new Date(), \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\n\n    // Check if the URL contains 'edit' to differentiate between create and edit actions\n    if (this.router.url.indexOf(\"edit\") !== -1) {\n      //customer id split in id\n      // const selectedResult = this.AddPaymentForm.value.cid;\n      // const customerId = selectedResult.split('-')[0]; // Extract the ID from the result\n\n      // For editing, form a request body with put method fields\n      const requestBody = {\n        id: this.paymentDetails.id,\n        cid: this.paymentDetails.cid,\n        month: this.paymentDetails.month,\n        year: this.paymentDetails.year,\n        salesAmount: this.AddPaymentForm.value.salesAmount,\n        dateOfPayment: formattedDate,\n        bank: this.AddPaymentForm.value.bank,\n        paymentDetails: this.AddPaymentForm.value.paymentDetails,\n        remarks: this.AddPaymentForm.value.remarks,\n        modifiedby: \"Admin\",\n        modifiedon: modifiedDate,\n      };\n\n      this.paymentService.updatePayment(requestBody)\n        .subscribe((response) => {\n          if (response.statusCode === 200) {\n            this.toastrService.show(response.statusMessage, \"Success\", {\n              status: \"success\",\n              duration: 8000,\n            });\n          } else {\n            this.toastrService.show(response.statusMessage, \"Warning\", {\n              status: \"warning\",\n              duration: 8000,\n            });\n          }\n          this.backToPaymentList();\n        });\n\n\n    } else {\n      //customer id split in id\n      const selectedResult = this.GetSalesForm.value.cid;\n      const customerId = selectedResult.split('-')[0]; // Extract the ID from the result\n\n      // Extract the month and year from the selected date\n      const selectedDate = this.GetSalesForm.value.monthAndYear;\n\n      // Convert the month to a string representation (e.g., January, February)\n      const month = new Intl.DateTimeFormat('en-US', { month: 'long' }).format(selectedDate);\n      const year = selectedDate.getFullYear().toString(); // Convert the year to a string\n\n      // For creating a new announcement\n      const requestBody = {\n        cid: customerId,\n        month: month,\n        year: year,\n        salesAmount: this.AddPaymentForm.value.salesAmount.toString(),\n        dateOfPayment: formattedDate,\n        bank: this.AddPaymentForm.value.bank,\n        paymentDetails: this.AddPaymentForm.value.paymentDetails,\n        remarks: this.AddPaymentForm.value.remarks,\n        createdby: \"Admin\",\n        createdon: modifiedDate, // You might want to update these fields\n        modifiedby: \"Admin\",\n        modifiedon: modifiedDate, // Similarly update these fields with appropriate values\n\n      };\n\n      this.paymentService.CreatePayment(requestBody)\n        .subscribe((response) => {\n          if (response.statusCode === 200) {\n            this.toastrService.show(response.statusMessage, \"Success\", {\n              status: \"success\",\n              duration: 8000,\n            });\n          } else if (response.statusCode === 403) {\n            this.toastrService.show(response.statusMessage, \"Warning\", {\n              status: \"warning\",\n              duration: 8000,\n            });\n          }\n          this.backToPaymentList();\n        });\n    }\n  }\n\n\n  /**\n   * Back to Payment List\n   * @param\n   * @returns\n   */\n  backToPaymentList() {\n    this.router.navigate([ROUTE_PATH.ADMIN, ROUTE_PATH.DASHBOARD]);\n  }\n\n}\n\n\n\n\n","<div class=\"row\">\n    <div class=\"col-md-12\">\n        <nb-card>\n            <nb-card-header class=\"text-center bold-text\">{{page_title}}\n                <div class=\"text-center\">\n                    <form [formGroup]=\"GetSalesForm\" (ngSubmit)=\"totalSales()\"> <br>\n                        <div class=\"form-group row\">\n                            <label for=\"cid\" class=\"label col-sm-3 col-form-label\"> Search Customer Name *</label>\n                            <div class=\" flex justify-content-center\">\n                                <span class=\"p-float-label\">\n                                    <p-autoComplete formControlName=\"cid\" [suggestions]=\"results\"\n                                        [forceSelection]=\"true\" (completeMethod)=\"onNameInputChange($event)\"\n                                        [minLength]=\"3\" placeholder=\"Enter minimum 3 letters\"\n                                        [attr.disabled]=\"GetSalesForm.get('cid').disabled ? true : null\">\n                                    </p-autoComplete>\n                                    <!-- <label for=\"float-label\">Search Name *</label> -->\n                                </span>\n                                <ng-container\n                                    *ngIf=\"GetSalesForm.controls.cid.touched && GetSalesForm.controls.cid.errors\">\n                                    <p class=\"caption status-danger\" *ngIf=\"GetSalesForm.controls.cid.errors.required\">\n                                        Name is required / Only select Name</p>\n                                </ng-container>\n                            </div>\n\n\n                            <label for=\"monthAndYear\" class=\"label col-sm-2 col-form-label\"> Select Year-Month *</label>\n                            <div class=\"col-sm-2\">\n                                <!-- <nb-select nbSelect placeholder=\"Select\" [size]=\"small\" formControlName=\"monthAndYear\">\n                            <nb-option value=\"January\">January</nb-option>\n                            <nb-option value=\"February\">February</nb-option>\n                            <nb-option value=\"March\">March</nb-option>\n                            <nb-option value=\"April\">April</nb-option>\n                            <nb-option value=\"May\">May</nb-option>\n                            <nb-option value=\"June\">June</nb-option>\n                            <nb-option value=\"July\">July</nb-option>\n                            <nb-option value=\"August\">August</nb-option>\n                            <nb-option value=\"September\">September</nb-option>\n                            <nb-option value=\"October\">October</nb-option>\n                            <nb-option value=\"November\">November</nb-option>\n                            <nb-option value=\"December\">December</nb-option>\n\n                        </nb-select> -->\n                                <p-calendar formControlName=\"monthAndYear\" view=\"month\" dateFormat=\"mm/yy\"\n                                    [readonlyInput]=\"true\"\n                                    [attr.disabled]=\"GetSalesForm.get('monthAndYear').disabled ? true : null\"></p-calendar>\n                                <ng-container\n                                    *ngIf=\"GetSalesForm.controls.monthAndYear.touched && GetSalesForm.controls.monthAndYear.errors\">\n                                    <p class=\"caption status-danger\"\n                                        *ngIf=\"GetSalesForm.controls.monthAndYear.errors.required\">\n                                        Year-Month is required </p>\n                                </ng-container>\n                            </div>\n\n                            <div class=\" col-sm-2\">\n                                <button type=\"submit\" nbButton outline status=\"success\" size=\"small\"\n                                    [disabled]=\"!GetSalesForm.valid || submitted || data_loading\">Submit</button>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </nb-card-header>\n            <nb-card-body [nbSpinner]=\"data_loading\" nbSpinnerStatus=\"info\">\n\n                <form [formGroup]=\"AddPaymentForm\" (ngSubmit)=\"onSubmit()\">\n\n                    <div class=\"form-group row justify-content-center\">\n                        <label for=\"salesAmount\" class=\"label col-sm-3 col-form-label\">Sales Amount *</label>\n                        <div class=\"col-sm-7\">\n                            <input nbInput fullWidth type=\"text\" formControlName=\"salesAmount\" disabled>\n                            <ng-container\n                                *ngIf=\"AddPaymentForm.controls.salesAmount.touched && AddPaymentForm.controls.salesAmount.errors\">\n                                <p class=\"caption status-danger\"\n                                    *ngIf=\"AddPaymentForm.controls.salesAmount.errors.required\">\n                                    Amount is required</p>\n                            </ng-container>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row justify-content-center\">\n                        <label for=\"dateOfPayment\" class=\"label col-sm-3 col-form-label\"> Date of payment *</label>\n                        <div class=\"col-sm-7\">\n                            <input nbInput fullWidth [nbDatepicker]=\"fromDatepicker\" formControlName=\"dateOfPayment\">\n                            <nb-datepicker #fromDatepicker></nb-datepicker>\n                            <ng-container\n                                *ngIf=\"AddPaymentForm.controls.dateOfPayment.touched && AddPaymentForm.controls.dateOfPayment.errors\">\n                                <p class=\"caption status-danger\"\n                                    *ngIf=\"AddPaymentForm.controls.dateOfPayment.errors.required\">\n                                    Date of payment is required </p>\n                            </ng-container>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row justify-content-center\">\n                        <label for=\"bank\" class=\"label col-sm-3 col-form-label\">Bank *</label>\n                        <div class=\"col-sm-7\">\n                            <input nbInput fullWidth type=\"text\" formControlName=\"bank\">\n                            <ng-container\n                                *ngIf=\"AddPaymentForm.controls.bank.touched && AddPaymentForm.controls.bank.errors\">\n                                <p class=\"caption status-danger\" *ngIf=\"AddPaymentForm.controls.bank.errors.required\">\n                                    Bank is required</p>\n                            </ng-container>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row justify-content-center\">\n                        <label for=\"paymentDetails\" class=\"label col-sm-3 col-form-label\">Payment details *</label>\n                        <div class=\"col-sm-7\">\n                            <input nbInput fullWidth type=\"text\" formControlName=\"paymentDetails\">\n                            <ng-container\n                                *ngIf=\"AddPaymentForm.controls.paymentDetails.touched && AddPaymentForm.controls.paymentDetails.errors\">\n                                <p class=\"caption status-danger\"\n                                    *ngIf=\"AddPaymentForm.controls.paymentDetails.errors.required\">\n                                    Payment details is required</p>\n                            </ng-container>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row justify-content-center\">\n                        <label for=\"remarks\" class=\"label col-sm-3 col-form-label\">Remarks *</label>\n                        <div class=\"col-sm-7\">\n                            <input nbInput fullWidth type=\"text\" formControlName=\"remarks\">\n                            <ng-container\n                                *ngIf=\"AddPaymentForm.controls.remarks.touched && AddPaymentForm.controls.remarks.errors\">\n                                <p class=\"caption status-danger\"\n                                    *ngIf=\"AddPaymentForm.controls.remarks.errors.required\">\n                                    Remarks is required</p>\n                            </ng-container>\n                            <ng-container *ngIf=\"AddPaymentForm.get('remarks').hasError('maxlength')\">\n                                <p class=\"caption status-danger\">Remarks should not exceed 100 characters</p>\n                            </ng-container>\n\n                        </div>\n                    </div>\n\n\n                    <div class=\"form-group row justify-content-center\">\n                        <button type=\"submit\" nbButton status=\"primary\"\n                            [disabled]=\"submitted || !AddPaymentForm.valid || data_loading\">Submit</button>\n                        &nbsp;&nbsp;\n                        <button nbButton status=\"danger\" (click)=\"backToPaymentList()\"\n                            routerLinkActive=\"router-link-active\"><b>\n                                Cancel\n                            </b></button>\n                    </div>\n                </form>\n\n            </nb-card-body>\n        </nb-card>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { NbDialogRef } from '@nebular/theme';\n\n@Component({\n  selector: 'ngx-payment-delete',\n  template:\n    `  <nb-card>\n      <nb-card-header class=\"text-center\">\n        <b>Delete Confirmation</b>\n      </nb-card-header>\n      <nb-card-body>\n        <p class=\"text-center\">Are you sure that you want to delete this <b>{{ user.refid }}</b>?</p>\n        <ul>\n          <li><strong>Customer ID:</strong> {{ user.cid }}</li>\n          <li><strong>Month:</strong> {{ user.month }}</li>\n          <li><strong>Year:</strong> {{ user.year }}</li>\n          <li><strong>Sales Amount:</strong> {{ user.salesAmount }}</li>          \n          <li><strong> Date Of Payment:</strong> {{ user.dateOfPayment | date: 'dd/MM/yyyy' }}</li>\n          <li><strong>Bank:</strong> {{ user.bank }}</li>\n          <li><strong>Payment Details:</strong> {{ user.paymentDetails }}</li>\n           <li><strong>Remarks:</strong> {{ user.remarks }}</li>\n\n        </ul>\n      </nb-card-body>\n      <nb-card-footer class=\"text-center\">\n        <button nbButton status=\"success\" (click)=\"deletePayment()\">Delete</button>&nbsp;&nbsp;&nbsp;\n        <button nbButton status=\"primary\" (click)=\"close()\">Cancel</button>\n      </nb-card-footer>\n    </nb-card>,\n`,\n})\nexport class PaymentDeleteComponent implements OnInit {\n\n  user: any;\n\n  constructor(protected dialogRef: NbDialogRef<PaymentDeleteComponent>) { }\n\n  ngOnInit(): void { }\n\n  close() {\n    this.dialogRef.close(false); // Close the delete dialog without approving\n  }\n\n  deletePayment() {\n    this.dialogRef.close(this.user); // Close the delete dialog and trigger the approval action\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NbDialogService, NbToastrService } from '@nebular/theme';\nimport { ConfirmationService } from 'primeng/api';\nimport { ROUTE_PATH } from '../../../shared/constants/route-path.constant';\nimport { HttpStatusCode } from '@angular/common/http';\nimport { PaymentsService } from '../services/payments.service';\nimport { PaymentDeleteComponent } from './payment-delete.component';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { BestperformerService } from '../../bestperformer/services/bestperformer.service';\nimport { debounceTime, switchMap } from 'rxjs/operators';\nimport { of } from 'rxjs';\n\n\n@Component({\n  selector: 'ngx-payments-list',\n  templateUrl: './payments-list.component.html',\n  styleUrls: ['./payments-list.component.scss']\n})\nexport class PaymentsListComponent implements OnInit {\n\n  AddPaymentForm: FormGroup;\n\n  data_loading = false;\n\n  //Change value to hide table\n  showTable = false;\n\n\n  itemsPerPage: any[] = [10, 25, 50];\n  users: any;\n  columns: any[]; // for table columns\n\n  first = 0;\n  rows = 10;\n\n  //summit button size \n  small = 'small';\n\n  results: string[];\n\n  constructor(\n    private dialogConfirmService: ConfirmationService,\n    private toastrService: NbToastrService,\n    private router: Router,\n    private aRoute: ActivatedRoute,\n    private paymentService: PaymentsService,\n    private dialogService: NbDialogService,\n    private formBuilder: FormBuilder,\n    private userService: BestperformerService,\n\n  ) { }\n\n  ngOnInit() {\n\n    this.AddPaymentFormInitialize();\n\n    // Add event listener to name field Change value to hide table\n    this.AddPaymentForm.get('name')?.valueChanges.subscribe(() => {\n      this.showTable = true;\n    });\n\n    // Add event listener to monthAndYear field Change value to hide table \n    this.AddPaymentForm.get('monthAndYear')?.valueChanges.subscribe(() => {\n      this.showTable = true;\n    });\n    \n    // table   with their respective field name and header value\n    this.columns = [\n      { field: \"id\", header: \"Id\", show: true, sort: true },\n      { field: \"month\", header: \"Month\", show: true, sort: true },\n      { field: \"year\", header: \"Year\", show: true, sort: true },\n      { field: \"amount\", header: \"Amount\", show: true, sort: true },\n      { field: \"date\", header: \"Date\", show: true, sort: true },\n      { field: \"bank\", header: \"Bank\", show: true, sort: true },\n      { field: \"payment\", header: \"Payment\", show: true, sort: true },\n      { field: \"remarks\", header: \"Remarks\", show: true, sort: true },\n\n    ];\n\n    // Subscribe to changes in the 'name' control and make API requests\n    this.AddPaymentForm.get('name').valueChanges.pipe(\n      debounceTime(300),\n      switchMap((name) => {\n        // Make the API request only if the name has at least 3 characters\n        if (name && name.length >= 3) {\n          return this.userService.getReferralIds(name);\n        } else {\n          // Return an empty observable if the input length is less than 3 characters\n          return of([]);\n        }\n      })\n    ).subscribe((response) => {\n      this.results = response;\n    });\n  }\n\n  onNameInputChange(event: any) {\n    const name = event.query\n    // Make the API request only if the name has at least 3 characters\n    if (name.length >= 3) {\n      this.userService.getReferralIds(name).subscribe((response) => {\n        let data = []\n        response.forEach((item: any) => {\n          data.push(item.idAndName)\n        })\n        this.results = data\n      });\n    } else {\n      // Clear the results if the input length is less than 3 characters\n      this.results = [];\n    }\n  }\n\n  /**\n   * User Form Initialize\n   */\n\n  AddPaymentFormInitialize() {\n    this.AddPaymentForm = this.formBuilder.group({\n      name: [\"\", [Validators.required]],\n      monthAndYear: [\"\", [Validators.required]],\n    });\n  }\n\n\n  /**\n   * create Payment\n   * @param\n   * @returns\n   */\n  makePayment() {\n\n    this.paymentService.setUserDetails(null);\n    this.router.navigate([\n      ROUTE_PATH.ADMIN,\n      ROUTE_PATH.PAYMENT,\n      ROUTE_PATH.PAYMENTS.CREATE,\n    ]);\n  }\n\n  /**\n   * Edit Payment\n   * @param user_id\n   * @returns\n   */\n  editPayment(user: any) {\n    this.paymentService.setUserDetails(user); // Pass the selected user details to the service\n    this.router.navigate([\n      ROUTE_PATH.ADMIN,\n      ROUTE_PATH.PAYMENT,\n      ROUTE_PATH.PAYMENTS.EDIT,\n      user.id\n    ]);\n  }\n\n  /**\n   * Delete Payment confirmation\n   * @param userId, userName\n   * @returns\n   */\n  confirmDelete(user: any) {\n    this.dialogService.open(PaymentDeleteComponent, {\n      context: { user },\n    }).onClose.subscribe((result) => {\n      if (result) {\n        this.deletePayment(user.id);\n      }\n    });\n  }\n\n  /**\n   * Delete Payment\n   * @param userId\n   * @returns\n   */\n  deletePayment(id) {\n    // let deletePostData = { userId: userId };\n\n    this.paymentService.deletePayment(id).subscribe(\n      (response) => {\n        if (HttpStatusCode.Ok) {\n          this.toastrService.show(response[\"message\"], \"Success\", {\n            status: \"success\",\n            duration: 8000,\n          });\n          this.onSubmit();\n        } else {\n          this.toastrService.show(response[\"message\"], \"Warning\", {\n            status: \"warning\",\n            duration: 8000,\n          });\n        }\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n\n  /**\n   * Payment List\n   * @param null\n   * @returns\n   */\n\n\n  onSubmit() {\n\n    const selectedName = this.AddPaymentForm.value.name;\n    const selectedDate = this.AddPaymentForm.value.monthAndYear;\n    console.log(selectedDate)\n    if (selectedDate && selectedName) {\n\n      // Convert the month to a string representation (e.g., January, February)\n      const month = new Intl.DateTimeFormat('en-US', { month: 'long' }).format(selectedDate);\n      const year = selectedDate.getFullYear().toString(); // Convert the year to a string\n      const customerId = selectedName.split('-')[0]; // Extract the ID from the selectedName\n\n      const requestBody = {\n        customerId: customerId,\n        month: month,\n        year: year\n      };\n\n      this.paymentApiRequest(requestBody);\n    } else if (selectedName) {\n\n      const customerId = selectedName.split('-')[0]; // Extract the ID from the selectedName\n\n      const requestBody = {\n        customerId: customerId,\n        month: \"\",\n        year: \"\"\n      };\n\n      this.paymentApiRequest(requestBody);\n    } else if (selectedDate) {\n\n      // Convert the month to a string representation (e.g., January, February)\n      const month = new Intl.DateTimeFormat('en-US', { month: 'long' }).format(selectedDate);\n      const year = selectedDate.getFullYear().toString(); // Convert the year to a string\n      // If the name is not selected, send the API request with an empty name\n      const requestBody = {\n        customerId: \"\",\n        month: month,\n        year: year\n      };\n      this.paymentApiRequest(requestBody);\n    }\n\n  }\n\n  // Extracted the API request logic to a separate function\n  private paymentApiRequest(requestBody: any) {\n    this.paymentService.getPaymentList(requestBody)\n      .subscribe((response) => {\n        this.showTable = false;\n        this.users = response;\n      })\n  }\n}\n\n\n\n","<nb-card class=\"inline-form-card full-card\">\n\n    <p-confirmDialog [style]=\"{width: '50vw'}\"></p-confirmDialog>\n    <nb-card-header>\n        <div class=\"row\">\n            <div class=\"col-md-9 text-center bold-text\">Payment List</div>\n            <div class=\"col-md-3\">\n                <button class=\"btn btn-sm btn-success\" type=\"button\" (click)=\"makePayment()\" >Make Payment</button>\n            </div>\n        </div><br>\n        <div class=\"card  text-center\">\n            <form [formGroup]=\"AddPaymentForm\" (ngSubmit)=\"onSubmit()\"><br>\n                <div class=\"form-group row\">\n                    <label for=\"name\" class=\"label col-sm-3 col-form-label\"> Search Customer Name *</label>\n                    <div class=\"col-sm-3\">\n                        <span class=\"p-fluid\">\n                            <p-autoComplete formControlName=\"name\" [suggestions]=\"results\" [forceSelection]=\"true\"\n                                (completeMethod)=\"onNameInputChange($event)\" [minLength]=\"3\"placeholder=\"Enter minimum 3 letters\">\n                            </p-autoComplete>\n                        </span>\n                        <ng-container\n                            *ngIf=\"AddPaymentForm.controls.name.touched && AddPaymentForm.controls.name.errors\">\n                            <p class=\"caption status-danger\" *ngIf=\"AddPaymentForm.controls.name.errors.required\">\n                                Name is required / Only select Name</p>\n                        </ng-container>\n                    </div>\n\n\n                    <label for=\"monthAndYear\" class=\"label col-sm-2 col-form-label\"> Select Year-Month *</label>\n                    <div class=\"col-sm-2\">\n                        <p-calendar formControlName=\"monthAndYear\" view=\"month\" dateFormat=\"mm/yy\"\n                            [readonlyInput]=\"true\"></p-calendar>\n                        <ng-container\n                            *ngIf=\"AddPaymentForm.controls.monthAndYear.touched && AddPaymentForm.controls.monthAndYear.errors\">\n                            <p class=\"caption status-danger\"\n                                *ngIf=\"AddPaymentForm.controls.monthAndYear.errors.required\">\n                                Year-Month is required </p>\n                        </ng-container>\n                    </div>\n\n                    <div class=\" col-sm-2\">\n                        <button type=\"submit\" nbButton outline status=\"success\" size=\"small\">Submit</button>\n                    </div>\n                </div>\n            </form>\n        </div><br>\n    </nb-card-header>\n    <nb-card-body>\n        <div class=\"text-center\" *ngIf=\"!users || users.length === 0 || showTable\">\n            <h5>No Data Found !</h5>\n        </div>\n        <div class=\"card\" *ngIf=\"users && users.length > 0 && !showTable\">\n            <div class=\"card\">\n                <p-table [value]=\"users\" [resizableColumns]=\"true\" [paginator]=\"true\" [rows]=\"rows\"\n                    [showCurrentPageReport]=\"true\" [autoLayout]=\"true\" [rowsPerPageOptions]=\"itemsPerPage\"\n                    [scrollable]=\"true\" scrollHeight=\"400px\">\n                    <ng-template pTemplate=\"header\">\n                        <tr>\n                            <ng-container *ngFor=\"let col of columns\">\n                                <th *ngIf=\"col.show\" pResizableColumn\n                                    [pSortableColumn]=\"(col.sort==true)? col.field:false\"\n                                    [class]=\"col.field+'-campaigns'\" class=\"text-center\">\n                                    <p-sortIcon *ngIf=\"col.sort==true\" [field]=\"col.field\" class=\"sort-icon\"\n                                        [id]=\"col.field+'-sort'\">\n                                    </p-sortIcon>\n                                    <span>{{col.header}}</span>\n                                </th>\n                            </ng-container>\n                            <th class=\"text-center\">Actions</th>\n                        </tr>\n                    </ng-template>\n                    <ng-template pTemplate=\"body\" let-user>\n                        <tr>\n                            <td nbTooltip=\"{{ user.cid }}\" nbTooltipPlacement=\"top\">{{ user.cid }}</td>\n                            <td nbTooltip=\"{{ user.month }}\" nbTooltipPlacement=\"top\">{{ user.month }}</td>\n                            <td nbTooltip=\"{{ user.year }}\" nbTooltipPlacement=\"top\">{{ user.year }}</td>\n                            <td nbTooltip=\"{{ user.salesAmount }}\" nbTooltipPlacement=\"top\">{{ user.salesAmount }}</td>\n                            <td nbTooltip=\"{{ user.dateOfPayment }}\" nbTooltipPlacement=\"top\">{{ user.dateOfPayment |\n                                date: 'dd/MM/yyyy'\n                                }}</td>\n                            <td nbTooltip=\"{{ user.bank }}\" nbTooltipPlacement=\"top\">{{ user.bank }}</td>\n                            <td nbTooltip=\"{{ user.paymentDetails }}\" nbTooltipPlacement=\"top\">{{ user.paymentDetails }}\n                            </td>\n                            <td nbTooltip=\"{{ user.remarks }}\" nbTooltipPlacement=\"top\">{{ user.remarks }}</td>\n                            <td class=\"text-center action\">\n                                <button (click)=\"editPayment(user)\" routerLinkActive=\"router-link-active\"\n                                    nbTooltip=\"Edit\" nbTooltipPlacement=\"top\"\n                                    class=\"btn btn-outline-primary btn-sm action-button\">\n                                    <nb-icon icon=\"edit\" pack=\"eva\" class=\"action-icons\"></nb-icon>\n                                </button>&nbsp;\n                                <button nbTooltip=\"Delete\" (click)=\"confirmDelete(user)\" nbTooltipPlacement=\"top\"\n                                    class=\"btn btn-outline-danger btn-sm action-button\">\n                                    <nb-icon icon=\"close\" pack=\"eva\" class=\"action-icons\"></nb-icon>\n                                </button>&nbsp;\n                            </td>\n                        </tr>\n                    </ng-template>\n                    <ng-template pTemplate=\"emptymessage\">\n                        <tr>\n                            <td colspan=\"3\" class=\"text-center\">No Data Found.</td>\n\n                        </tr>\n                    </ng-template>\n                </p-table>\n            </div>\n        </div>\n    </nb-card-body>\n</nb-card>","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { PaymentsListComponent } from './payments-list/payments-list.component';\nimport { PaymentAddEditComponent } from './payment-add-edit/payment-add-edit.component';\n\n\nconst routes: Routes = [\n  {\n    path: 'create',\n    component: PaymentAddEditComponent,\n  },\n  {\n    path: 'edit/:id',\n    component: PaymentAddEditComponent,\n  },\n  {\n    path: 'list',\n    component: PaymentsListComponent,\n  },\n  {\n    path: '',\n    redirectTo: 'list', // Default route\n    pathMatch: 'full',\n  },\n  {\n    path: '**',\n    redirectTo: 'list', // Default route\n    pathMatch: 'full',\n  },\n\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class PaymentsRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  NbActionsModule,\n  NbAlertModule,\n  NbCalendarKitModule,\n  NbCalendarModule,\n  NbCalendarRangeModule,\n  NbDatepickerModule,\n  NbFormFieldModule,\n  NbProgressBarModule,\n  NbSpinnerModule,\n  NbTooltipModule,\n  NbCheckboxModule,\n  NbButtonModule,\n  NbAccordionModule,\n  NbCardModule,\n  NbDialogModule,\n  NbListModule,\n  NbRouteTabsetModule,\n  NbStepperModule,\n  NbTabsetModule,\n  NbUserModule,\n  NbIconModule,\n  NbInputModule,\n  NbTreeGridModule,\n  NbSelectModule,\n  NbToggleModule,\n  NbContextMenuModule,\n} from '@nebular/theme';\n\nimport { ThemeModule } from '../../@theme/theme.module';\n\n// Interceptor\nimport { NbAuthJWTInterceptor, HttpErrorInterceptor } from '../../auth/interceptor/jwt-interceptor';\n\n// Primeng\nimport { TableModule } from 'primeng/table';\nimport { ButtonModule } from 'primeng/button';\nimport { DialogModule } from 'primeng/dialog';\nimport { ConfirmDialogModule } from 'primeng/confirmdialog';\nimport { ConfirmationService } from 'primeng/api';\nimport { AutoCompleteModule } from 'primeng/autocomplete';\n\n\nimport { PaymentsRoutingModule } from './payments-routing.module';\nimport { PaymentsListComponent } from './payments-list/payments-list.component';\nimport { PaymentAddEditComponent } from './payment-add-edit/payment-add-edit.component';\nimport { PaymentDeleteComponent } from './payments-list/payment-delete.component';\nimport { CalendarModule } from 'primeng/calendar';\n\n\n\n@NgModule({\n  declarations: [\n    PaymentsListComponent,\n    PaymentAddEditComponent,\n    PaymentDeleteComponent\n  ],\n  imports: [\n    CommonModule,\n    PaymentsRoutingModule,\n    HttpClientModule,\n    NbActionsModule,\n    NbAlertModule,\n    NbCalendarKitModule,\n    NbCalendarModule,\n    NbCalendarRangeModule,\n    NbDatepickerModule.forRoot(),\n    NbFormFieldModule,\n    NbProgressBarModule,\n    NbSpinnerModule,\n    NbTooltipModule,\n    NbCheckboxModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ThemeModule,\n    NbTabsetModule,\n    NbRouteTabsetModule,\n    NbStepperModule,\n    NbCardModule,\n    NbButtonModule,\n    NbListModule,\n    NbAccordionModule,\n    NbUserModule,\n    NbIconModule,\n    NbInputModule,\n    NbTreeGridModule,\n    NbSelectModule,\n    NbToggleModule,\n    NbContextMenuModule,\n    NbDialogModule.forRoot(),\n    TableModule,\n    ButtonModule,\n    ConfirmDialogModule,\n    DialogModule,\n    AutoCompleteModule,\n    CalendarModule,\n  ],\n  providers: [\n    ConfirmationService,\n    { provide: HTTP_INTERCEPTORS, useClass: NbAuthJWTInterceptor, multi: true },\n    { provide: HTTP_INTERCEPTORS, useClass: HttpErrorInterceptor, multi: true }\n  ],\n})\nexport class PaymentsModule { }\n"],"names":[],"sourceRoot":"webpack:///"}