{"version":3,"file":"src_app_admin_bestperformer_bestperformer_module_ts.js","mappings":"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","sources":["./src/app/admin/bestperformer/bestperformer-add-edit/bestperformer-add-edit.component.ts","./src/app/admin/bestperformer/bestperformer-add-edit/bestperformer-add-edit.component.html","./src/app/admin/bestperformer/bestperformer-list/bestperformer-delete.component.ts","./src/app/admin/bestperformer/bestperformer-list/bestperformer-list.component.ts","./src/app/admin/bestperformer/bestperformer-list/bestperformer-list.component.html","./src/app/admin/bestperformer/bestperformer-routing.module.ts","./src/app/admin/bestperformer/bestperformer.module.ts","./src/app/admin/bestperformer/services/bestperformer.service.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { BestperformerService } from '../services/bestperformer.service';\nimport { debounceTime, switchMap } from 'rxjs/operators';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NbToastrService } from '@nebular/theme';\nimport { DatePipe } from '@angular/common';\nimport { Subscription, of } from 'rxjs';\nimport { HttpStatusCode } from '@angular/common/http';\nimport { ROUTE_PATH } from '../../../shared/constants/route-path.constant';\n\n@Component({\n  selector: 'ngx-bestperformer-add-edit',\n  templateUrl: './bestperformer-add-edit.component.html',\n  styleUrls: ['./bestperformer-add-edit.component.scss']\n})\nexport class BestperformerAddEditComponent implements OnInit {\n\n  AddUserForm: FormGroup;\n  submitted = false;\n  //page_title: string;\n  data_loading = false;\n\n  //show password\n  showPassword = true;\n\n  //userlist pass user data\n  userDetails: any;\n  page_title: string;\n\n  results: any[] = [];\n\n  private userSubscription: Subscription;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private aRoute: ActivatedRoute,\n    private userService: BestperformerService,\n    private toastrService: NbToastrService,\n    private datePipe: DatePipe,\n\n  ) { }\n\n\n  ngOnInit(): void {\n    this.AddUserFormInitialize();\n\n    if (this.router.url.indexOf(\"edit\") !== -1) {\n      // this.data_loading = true;\n      const id = this.aRoute.snapshot.paramMap.get(\"title\");\n      this.page_title = \"Edit Bestperformer\";\n    } else {\n      this.page_title = \"Add Bestperformer\";\n      this.AddUserForm.reset();\n    }\n\n\n    // Check if user details are passed user list, service to user-edit\n\n    this.userSubscription = this.userService.getUserDetails().subscribe(user => {\n      if (user) {\n        this.userDetails = user;\n        console.log(this.userDetails)\n        // Pre-fill the form with user details\n        this.AddUserForm.patchValue({\n          name: this.userDetails.refid,\n          sales: this.userDetails.sales,\n          remarks: this.userDetails.remarks,\n          fdate: new Date(this.userDetails.fdate), // Assuming 'fdate' is a date field\n          tdate: new Date(this.userDetails.tdate),\n        });\n      } else {\n        this.AddUserForm.reset(); // Ensure the form is reset when no user details are present\n      }\n    });\n\n    // Subscribe to changes in the 'name' control and make API requests\n    this.AddUserForm.get('name').valueChanges.pipe(\n      debounceTime(300),\n      switchMap((name) => {\n        // Make the API request only if the name has at least 3 characters\n        if (name.length >= 3) {\n          return this.userService.getReferralIds(name);\n        } else {\n          // Return an empty observable if the input length is less than 3 characters\n          return of([]);\n        }\n      })\n    ).subscribe((response) => {\n      this.results = response;\n    });\n\n  }\n\n  ngOnDestroy(): void {\n    // Unsubscribe to prevent multiple subscriptions when leaving the component\n    this.userSubscription.unsubscribe();\n  }\n\n  onNameInputChange() {\n    const name = this.AddUserForm.get('name').value;\n\n    // Make the API request only if the name has at least 3 characters\n    if (name.length >= 3) {\n      this.userService.getReferralIds(name).subscribe((response) => {\n        this.results = response;\n      });\n    } else {\n      // Clear the results if the input length is less than 3 characters\n      this.results = [];\n    }\n  }\n\n\n  selectResult(result: any) {\n    this.AddUserForm.patchValue({\n      name: result.idAndName,\n      // refid: result.idAndName.split('-')[0] , // Extract the ID from the result\n      refid: result.idAndName,\n    });\n    this.results = []; // Clear the results after selection\n  }\n\n  /**\n   * User Form Initialize\n   */\n\n  AddUserFormInitialize() {\n    this.AddUserForm = this.formBuilder.group({\n      name: [\"\", [Validators.required]],\n      sales: [\"\", [Validators.required]],\n      remarks: [\"\", [Validators.required, Validators.maxLength(100)]],\n      fdate: [new Date(), [Validators.required]],\n      tdate: [new Date(), [Validators.required]],\n      // refid: [0], // Add the refid control\n    });\n  }\n\n  onSubmit() {\n    this.submitted = true;\n\n    if (this.AddUserForm.invalid) {\n      return;\n    }\n\n    // const formData = this.AddUserForm.value;\n    // console.log(formData.fdate)\n\n    // Format the date strings before sending them to the server\n    const formattedFromDate = this.datePipe.transform(this.AddUserForm.value.fdate, \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\n    const formattedToDate = this.datePipe.transform(this.AddUserForm.value.tdate, \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\n\n    // Get the current date and time in the desired format\n    const modifiedDate = this.datePipe.transform(new Date(), \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");\n\n    // Check if the URL contains 'edit' to differentiate between create and edit actions\n    if (this.router.url.indexOf(\"edit\") !== -1) {\n      // For editing, form a request body with put method fields\n      const requestBody = {\n        id: this.userDetails.id,\n        refid: this.AddUserForm.value.name,\n        sales: this.AddUserForm.value.sales,\n        remarks: this.AddUserForm.value.remarks,\n        fdate: formattedFromDate,\n        tdate: formattedToDate,\n        isdeleted: \"string\",\n        createdby: \"Admin\",\n        createdon: modifiedDate, // You might want to update these fields\n        modifiedby: \"Admin\",\n        modifiedon: modifiedDate, // Similarly update these fields with appropriate values\n      };\n\n      this.userService.updateUser(requestBody)\n        .subscribe((response) => {\n          // this.backToUserList();\n          if (HttpStatusCode.Ok) {\n            this.toastrService.show(response[\"message\"], \"Success\", {\n              status: \"success\",\n              duration: 8000,\n            });\n          } else {\n            this.toastrService.show(response[\"message\"], \"Warning\", {\n              status: \"warning\",\n              duration: 8000,\n            });\n          }\n          this.router.navigate([ROUTE_PATH.ADMIN, ROUTE_PATH.BESTPERFORMER, ROUTE_PATH.BESTPERFORMERS.LIST,]);\n        });\n\n\n    } else {\n      // For creating a new announcement\n      const requestBody = {\n        refid: this.AddUserForm.value.name,\n        sales: this.AddUserForm.value.sales,\n        remarks: this.AddUserForm.value.remarks,\n        fdate: formattedFromDate,\n        tdate: formattedToDate,\n        isdeleted: \"string\",\n        createdby: \"Admin\",\n        createdon: modifiedDate, // You might want to update these fields\n        modifiedby: \"Admin\",\n        modifiedon: modifiedDate, // Similarly update these fields with appropriate values\n\n      };\n\n      this.userService.CreateAnnouncement(requestBody)\n        .subscribe((response) => {\n          if (HttpStatusCode.Ok) {\n            this.toastrService.show(response[\"message\"], \"Success\", {\n              status: \"success\",\n              duration: 8000,\n            });\n          } else {\n            this.toastrService.show(response[\"message\"], \"Warning\", {\n              status: \"warning\",\n              duration: 8000,\n            });\n          }\n          //  this.backToUserList();\n          this.router.navigate([ROUTE_PATH.ADMIN, ROUTE_PATH.BESTPERFORMER, ROUTE_PATH.BESTPERFORMERS.LIST,]);\n        });\n    }\n  }\n\n\n  /**\n   * Back to User List\n   * @param\n   * @returns\n   */\n  backToUserList() {\n    this.router.navigate([ROUTE_PATH.ADMIN, ROUTE_PATH.BESTPERFORMER, ROUTE_PATH.BESTPERFORMERS.LIST,]);\n  }\n\n}\n\n\n// form: FormGroup;\n// results: any[] = [];\n\n// constructor(private fb: FormBuilder, private apiService: BestperformerService) {\n//   this.form = this.fb.group({\n//     name: [''],\n//   });\n//   // Listen to changes in the 'name' control and make API requests\n//   this.form\n//     .get('name')\n//     .valueChanges.pipe(\n//       debounceTime(300),\n//       switchMap((name) => this.apiService.getReferralIds(name))\n//     )\n//     .subscribe((response) => {\n//       this.results = response;\n//     });\n// }\n\n// selectResult(result: any) {\n//   // Handle the selected result, for example, send it in another API request\n//   console.log('Selected Result:', result);\n// }\n\n\n","<!-- <form [formGroup]=\"form\">\n      <label for=\"name\">Name:</label>\n      <input type=\"text\" formControlName=\"name\" />\n      <div *ngFor=\"let result of results\" (click)=\"selectResult(result)\">\n        {{ result.idAndName }}\n      </div>\n    </form> -->\n<div class=\"row\">\n    <div class=\"col-md-12\">\n        <nb-card>\n            <nb-card-header class=\"text-center bold-text\">{{page_title}}</nb-card-header>\n            <nb-card-body [nbSpinner]=\"data_loading\" nbSpinnerStatus=\"info\">\n\n                <form [formGroup]=\"AddUserForm\" (ngSubmit)=\"onSubmit()\">\n\n                    <div class=\"form-group row\">\n                        <label for=\"name\" class=\"label col-sm-3 col-form-label\"> Name *</label>\n                        <div class=\"col-sm-9\">\n                            <input nbInput fullWidth type=\"text\" formControlName=\"name\" (input)=\"onNameInputChange()\">\n                            <div *ngFor=\"let result of results\" (click)=\"selectResult(result)\">\n                                {{ result.idAndName }}\n                            </div>\n                            <!-- <ng-container *ngIf=\"AddUserForm.controls.name.touched && AddUserForm.controls.name.errors\">\n                                <p class=\"caption status-danger\" *ngIf=\"AddUserForm.controls.name.errors.required\">\n                                     Name is required</p>\n                            </ng-container> -->\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label for=\"sales\" class=\"label col-sm-3 col-form-label\">Sale *</label>\n                        <div class=\"col-sm-9\">\n                            <input nbInput fullWidth type=\"text\" formControlName=\"sales\">\n                            <ng-container\n                                *ngIf=\"AddUserForm.controls.sales.touched && AddUserForm.controls.sales.errors\">\n                                <p class=\"caption status-danger\" *ngIf=\"AddUserForm.controls.sales.errors.required\">\n                                    Sale is required</p>\n                            </ng-container>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label for=\"remarks\" class=\"label col-sm-3 col-form-label\">Remarks *</label>\n                        <div class=\"col-sm-9\">\n                            <input nbInput fullWidth type=\"text\" formControlName=\"remarks\">\n                            <ng-container\n                                *ngIf=\"AddUserForm.controls.remarks.touched && AddUserForm.controls.remarks.errors\">\n                                <p class=\"caption status-danger\" *ngIf=\"AddUserForm.controls.remarks.errors.required\">\n                                    Remarks is required</p>\n                            </ng-container>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label for=\"fdate\" class=\"label col-sm-3 col-form-label\">From Date *</label>\n                        <div class=\"col-sm-9\">\n                            <input nbInput fullWidth [nbDatepicker]=\"fromDatepicker\" formControlName=\"fdate\">\n                            <nb-datepicker #fromDatepicker></nb-datepicker>\n                            <ng-container\n                                *ngIf=\"AddUserForm.controls.fdate.touched && AddUserForm.controls.fdate.errors\">\n                                <p class=\"caption status-danger\" *ngIf=\"AddUserForm.controls.fdate.errors.required\">\n                                    From Date is required </p>\n                            </ng-container>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label for=\"tdate\" class=\"label col-sm-3 col-form-label\">To Date *</label>\n                        <div class=\"col-sm-9\">\n                            <input nbInput fullWidth [nbDatepicker]=\"toDatepicker\" formControlName=\"tdate\">\n                            <nb-datepicker #toDatepicker></nb-datepicker>\n                            <ng-container\n                                *ngIf=\"AddUserForm.controls.tdate.touched && AddUserForm.controls.tdate.errors\">\n                                <p class=\"caption status-danger\" *ngIf=\"AddUserForm.controls.tdate.errors.required\">\n                                    To Date is required </p>\n                            </ng-container>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <div class=\"offset-sm-3 col-sm-9\">\n                            <button type=\"submit\" nbButton status=\"primary\"\n                                [disabled]=\"submitted || !AddUserForm.valid || data_loading\">Submit</button>\n                            &nbsp;&nbsp;\n                            <button nbButton status=\"danger\" (click)=\"backToUserList()\"\n                                routerLinkActive=\"router-link-active\"><b>\n                                    Cancel\n                                </b></button>\n                        </div>\n                    </div>\n                </form>\n\n            </nb-card-body>\n        </nb-card>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { NbDialogRef } from '@nebular/theme';\n\n@Component({\n  selector: 'ngx-bestperformer-delete',\n  template:\n `  <nb-card>\n      <nb-card-header class=\"text-center\">\n        <b>Delete Confirmation</b>\n      </nb-card-header>\n      <nb-card-body>\n        <p>Are you sure that you want to delete this <b>{{ user.refid }}</b>?</p>\n        <ul>\n          <li><strong>Name:</strong> {{ user.refid }}</li>\n          <li><strong>Sales:</strong> {{ user.sales }}</li>\n          <li><strong>Remarks:</strong> {{ user.remarks }}</li>\n          <li><strong>From Date:</strong> {{ user.fdate | date: 'dd/MM/yyyy' }}</li>\n          <li><strong>To Date:</strong> {{ user.tdate  | date: 'dd/MM/yyyy'  }}</li>\n        </ul>\n      </nb-card-body>\n      <nb-card-footer class=\"text-center\">\n        <button nbButton status=\"success\" (click)=\"deleteBestperformer()\">Delete</button>&nbsp;&nbsp;&nbsp;\n        <button nbButton status=\"primary\" (click)=\"close()\">Cancel</button>\n      </nb-card-footer>\n    </nb-card>,\n`})\nexport class BestperformerDeleteComponent implements OnInit {\n\n  user: any;\n\n  constructor(protected dialogRef: NbDialogRef<BestperformerDeleteComponent>) { }\n\n  ngOnInit(): void { }\n\n  close() {\n    this.dialogRef.close(false); // Close the delete dialog without approving\n  }\n\n  deleteBestperformer() {\n    this.dialogRef.close(this.user); // Close the delete dialog and trigger the approval action\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NbDialogService, NbToastrService } from '@nebular/theme';\nimport { ConfirmationService } from 'primeng/api';\nimport { ROUTE_PATH } from '../../../shared/constants/route-path.constant';\nimport { HttpStatusCode } from '@angular/common/http';\nimport { BestperformerService } from '../services/bestperformer.service';\nimport { BestperformerDeleteComponent } from './bestperformer-delete.component';\n\n@Component({\n  selector: 'ngx-bestperformer-list',\n  templateUrl: './bestperformer-list.component.html',\n  styleUrls: ['./bestperformer-list.component.scss']\n})\nexport class BestperformerListComponent implements OnInit {\n\n  itemsPerPage: any[] = [10, 25, 50];\n  users: any;\n  columns: any[]; // for table columns\n\n  first = 0;\n  rows = 10;\n\n  constructor(\n    private dialogConfirmService: ConfirmationService,\n    private toastrService: NbToastrService,\n    private router: Router,\n    private aRoute: ActivatedRoute,\n    private userService: BestperformerService,\n    private dialogService: NbDialogService\n  ) { }\n\n  ngOnInit() {\n    // table   with their respective field name and header value\n    this.columns = [\n      { field: \"name\", header: \"Name\", show: true, sort: true },\n      { field: \"sale\", header: \"Sale\", show: true, sort: true },\n      { field: \"remarks\", header: \"Remarks\", show: true, sort: true },\n      { field: \"fdate\", header: \"From Date\", show: true, sort: true },\n      { field: \"tdate\", header: \"To Date\", show: true, sort: true },\n    ];\n\n    this.userList();\n  }\n  /**\n * create Company\n * @param\n * @returns\n */\n  createBestperformer() {\n\n    this.userService.setUserDetails(null);\n    this.router.navigate([\n      ROUTE_PATH.ADMIN,\n      ROUTE_PATH.BESTPERFORMER,\n      ROUTE_PATH.BESTPERFORMERS.CREATE,\n    ]);\n  }\n\n  /**\n   * Edit User\n   * @param user_id\n   * @returns\n   */\n  editBestperformer(user: any) {\n    this.userService.setUserDetails(user); // Pass the selected user details to the service\n    console.log(user)\n    this.router.navigate([\n      ROUTE_PATH.ADMIN,\n      ROUTE_PATH.BESTPERFORMER,\n      ROUTE_PATH.BESTPERFORMERS.EDIT,\n      user.id\n    ]);\n  }\n\n  /**\n   * Delete User confirmation\n   * @param userId, userName\n   * @returns\n   */\n  confirmDelete(user: any) {\n    this.dialogService.open(BestperformerDeleteComponent, {\n      context: { user },\n    }).onClose.subscribe((result) => {\n      if (result) {\n        this.deleteUser(user.id);\n        console.log(user)\n      }\n    });\n  }\n\n  /**\n   * Delete Company\n   * @param userId\n   * @returns\n   */\n  deleteUser(id) {\n    // let deletePostData = { userId: userId };\n\n    this.userService.deleteUser(id).subscribe(\n      (response) => {\n        this.userList();\n        if (HttpStatusCode.Ok) {\n          this.toastrService.show(response[\"message\"], \"Success\", {\n            status: \"success\",\n            duration: 8000,\n          });\n        } else {\n          this.toastrService.show(response[\"message\"], \"Warning\", {\n            status: \"warning\",\n            duration: 8000,\n          });\n        }\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n\n  /**\n   * Company List\n   * @param null\n   * @returns\n   */\n\n  userList() {\n\n    //this.users  =this.staticUsers;\n    this.userService.getBestperformerList().subscribe(\n      (response) => {\n        console.log(response)\n        this.users = response;\n        // if (HttpStatusCode.Ok) {\n        //   this.toastrService.show(response[\"message\"], \"Success\", {\n        //     status: \"success\",\n        //     duration: 8000,\n        //   });\n        // } else {\n        //   this.toastrService.show(response[\"message\"], \"Warning\", {\n        //     status: \"warning\",\n        //     duration: 8000,\n        //   });\n        // }\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n\n\n}\n\n","<nb-card class=\"inline-form-card full-card\">\n\n    <p-confirmDialog [style]=\"{width: '50vw'}\"></p-confirmDialog>\n    <nb-card-header>\n        <div class=\"row\">\n            <div class=\"col-md-9 text-center bold-text\">BestPerformer List</div>\n            <div class=\"col-md-3\">\n                <button class=\"btn btn-sm btn-success\" (click)=\"createBestperformer()\">Create BestPerformer</button>\n            </div>\n        </div>\n    </nb-card-header>\n    <nb-card-body>\n\n        <div class=\"card\">\n            <p-table [value]=\"users\" [paginator]=\"true\" [rows]=\"rows\" [showCurrentPageReport]=\"true\" [autoLayout]=\"true\"\n                [rowsPerPageOptions]=\"itemsPerPage\">\n                <ng-template pTemplate=\"header\">\n                    <tr>\n                        <ng-container *ngFor=\"let col of columns\">\n                            <th *ngIf=\"col.show\" [pSortableColumn]=\"(col.sort==true)? col.field:false\"\n                                [class]=\"col.field+'-campaigns'\" class=\"text-center\">\n                                <p-sortIcon *ngIf=\"col.sort==true\" [field]=\"col.field\" class=\"sort-icon\"\n                                    [id]=\"col.field+'-sort'\">\n                                </p-sortIcon>\n                                <span>{{col.header}}</span>\n                            </th>\n                        </ng-container>\n                        <th class=\"text-center\">Actions</th>\n                    </tr>\n                </ng-template>\n                <ng-template pTemplate=\"body\" let-user>\n                    <!-- Body changes based on the new fields -->\n                    <tr>\n                        <td class=\"text-center\">{{ user.refid }}</td>\n                        <td class=\"text-center\">{{ user.sales }}</td>\n                        <td class=\"text-center\" style=\"width: 38%;\">{{ user.remarks }}</td>\n                        <td class=\"text-center\">{{ user.fdate | date: 'dd/MM/yyyy' }}</td>\n                        <td class=\"text-center\">{{ user.tdate | date: 'dd/MM/yyyy' }}</td>\n                        <td class=\"text-center action\">\n                            <button (click)=\"editBestperformer(user)\" routerLinkActive=\"router-link-active\"\n                                nbTooltip=\"Edit\" nbTooltipPlacement=\"top\"\n                                class=\"btn btn-outline-primary btn-sm action-button\">\n                                <nb-icon icon=\"edit\" pack=\"eva\" class=\"action-icons\"></nb-icon>\n                            </button>&nbsp;\n                            <button nbTooltip=\"Delete\" (click)=\"confirmDelete(user)\" nbTooltipPlacement=\"top\"\n                                class=\"btn btn-outline-danger btn-sm action-button\">\n                                <nb-icon icon=\"close\" pack=\"eva\" class=\"action-icons\"></nb-icon>\n                            </button>&nbsp;\n                        </td>\n                    </tr>\n                </ng-template>\n            </p-table>\n        </div>\n    </nb-card-body>\n</nb-card>","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { BestperformerListComponent } from './bestperformer-list/bestperformer-list.component';\nimport { BestperformerAddEditComponent } from './bestperformer-add-edit/bestperformer-add-edit.component';\n\nconst routes: Routes = [\n  {\n    path: 'list',\n    component: BestperformerListComponent,\n  },\n  {\n    path: 'create',\n    component: BestperformerAddEditComponent,\n  },\n  {\n    path: 'edit/:id',\n    component: BestperformerAddEditComponent,\n  },\n  {\n    path: '',\n    redirectTo: 'list', // Default route\n    component: BestperformerListComponent,\n  },\n\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class BestperformerRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  NbActionsModule,\n  NbAlertModule,\n  NbCalendarKitModule,\n  NbCalendarModule,\n  NbCalendarRangeModule,\n  NbFormFieldModule,\n  NbProgressBarModule,\n  NbSpinnerModule,\n  NbTooltipModule,\n  NbCheckboxModule,\n  NbButtonModule,\n  NbAccordionModule,\n  NbCardModule,\n  NbDialogModule,\n  NbListModule,\n  NbRouteTabsetModule,\n  NbStepperModule,\n  NbTabsetModule,\n  NbUserModule,\n  NbIconModule,\n  NbInputModule,\n  NbTreeGridModule,\n  NbSelectModule,\n  NbToggleModule, \n  NbContextMenuModule,\n  NbDatepickerModule,\n} from '@nebular/theme';\n\nimport { ThemeModule } from '../../@theme/theme.module';\n\n// Interceptor\nimport { NbAuthJWTInterceptor, HttpErrorInterceptor } from '../../auth/interceptor/jwt-interceptor';\n\n// Primeng\nimport { TableModule } from 'primeng/table';\nimport {ButtonModule} from 'primeng/button';\nimport { DialogModule } from 'primeng/dialog';\nimport { ConfirmDialogModule } from 'primeng/confirmdialog';\nimport { ConfirmationService } from 'primeng/api';\n\n\nimport { BestperformerListComponent } from './bestperformer-list/bestperformer-list.component';\nimport { BestperformerRoutingModule } from './bestperformer-routing.module';\nimport { BestperformerDeleteComponent } from './bestperformer-list/bestperformer-delete.component';\nimport { BestperformerAddEditComponent } from './bestperformer-add-edit/bestperformer-add-edit.component';\n\n\n\n\n@NgModule({\n  declarations: [BestperformerListComponent,BestperformerDeleteComponent, BestperformerAddEditComponent, ],\n  imports: [\n    CommonModule,\n    BestperformerRoutingModule,\n    HttpClientModule,\n    NbActionsModule,\n    NbAlertModule,\n    NbCalendarKitModule,\n    NbCalendarModule,\n    NbCalendarRangeModule,\n    NbDatepickerModule.forRoot(),\n    NbFormFieldModule,\n    NbProgressBarModule,\n    NbSpinnerModule,\n    NbTooltipModule,\n    NbCheckboxModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ThemeModule,\n    NbTabsetModule,\n    NbRouteTabsetModule,\n    NbStepperModule,\n    NbCardModule,\n    NbButtonModule,\n    NbListModule,\n    NbAccordionModule,\n    NbUserModule,\n    NbIconModule,\n    NbInputModule,\n    NbTreeGridModule,\n    NbSelectModule,\n    NbToggleModule,\n    NbContextMenuModule,\n    NbDialogModule.forRoot(),\n    TableModule,\n    ButtonModule,\n    ConfirmDialogModule,\n    DialogModule,\n  ],\n  providers: [\n    ConfirmationService, \n    { provide: HTTP_INTERCEPTORS, useClass: NbAuthJWTInterceptor, multi: true }, \n    { provide: HTTP_INTERCEPTORS, useClass: HttpErrorInterceptor, multi: true }\n  ],\n})\nexport class BestperformerModule { }\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { NbAuthJWTToken, NbAuthService } from '@nebular/auth';\nimport { BehaviorSubject, Observable, of, throwError } from 'rxjs';\nimport { API_END_POINTS, getApiEndPoint } from '../../../shared/constants/api-constant';\nimport { switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BestperformerService {\n  user = {};\n\n  constructor(\n    private userServicehttp: HttpClient,\n    private authService: NbAuthService\n  ) {\n    this.authService.onTokenChange().subscribe((token: NbAuthJWTToken) => {\n      if (token.isValid()) {\n        this.user = token.getPayload(); // here we receive a payload from the token and assigns it to our `user` variable\n      }\n    });\n  }\n\n  //pass select user Details in User-Edit\n\n  private userDetails = new BehaviorSubject<any>(null);\n\n  setUserDetails(user: any) {\n    this.userDetails.next(user);\n    console.log(user)\n  }\n\n  getUserDetails() {\n    return this.userDetails.asObservable();\n  }\n\n  /**\n   * User List\n   * @returns\n   */\n  getReferralIds(name: string): Observable<any[]> {\n    let apiURL = getApiEndPoint(`${API_END_POINTS.BESTPERFORMER.REFID}?name=${name}`);\n    return this.userServicehttp.get<any[]>(apiURL).pipe(\n      switchMap((result: any) => {\n        if (result) {\n          return of(result);\n        } else {\n          return throwError(result);\n        }\n      })\n    );\n  }\n\n  getBestperformerList(): Observable<any> {\n    let apiURL = getApiEndPoint(API_END_POINTS.BESTPERFORMER.GETAll);\n    return this.userServicehttp.get(apiURL).pipe(\n      switchMap((result: any) => {\n        if (result) {\n          return of(result);\n        } else {\n          return throwError(result);\n        }\n      })\n    );\n  }\n\n  /**\n   * Delete User\n   * @param userId\n   * @returns\n   *\n   */\n  deleteUser(id: number): Observable<any> {\n    let apiURL = getApiEndPoint(`${API_END_POINTS.BESTPERFORMER.DELETE}?id=${id}`);\n    return this.userServicehttp.put(apiURL, null).pipe(\n      switchMap((result: any) => {\n        if (result) {\n          return of(result);\n        } else {\n          return throwError(result);\n        }\n      })\n    );\n  }\n\n\n  /**\n   * Update User details\n   * @param user\n   * @returns\n   *\n   */\n  updateUser(requestBody): Observable<any> {\n    let apiURL = getApiEndPoint(`${API_END_POINTS.BESTPERFORMER.UPDATE}`);\n    return this.userServicehttp.put(apiURL, requestBody).pipe(\n      switchMap((result: any) => {\n        if (result) {\n          return of(result);\n        } else {\n          return throwError(result);\n        }\n      })\n    );\n  }\n\n\n\n  /**\n   * Create User\n   * @param Values\n   * @returns\n   *\n   */\n\n  CreateAnnouncement(requestBody): Observable<any> {\n    let apiURL = getApiEndPoint(`${API_END_POINTS.BESTPERFORMER.ADD}`);\n    console.log(requestBody)\n    return this.userServicehttp.post(apiURL, requestBody).pipe(\n      switchMap((result: any) => {\n        if (result) {\n          return of(result);\n        } else {\n          return throwError(result);\n        }\n      })\n    );\n  }\n\n}\n"],"names":[],"sourceRoot":"webpack:///"}